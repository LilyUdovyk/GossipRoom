{"version":3,"sources":["history.ts","store/auth/actions.ts","store/auth/reducers.ts","store/user/actions.ts","store/user/reducers.ts","store/contacts/actions.ts","store/contacts/reducers.ts","store/chat/actions.ts","store/chat/reducers.ts","store/message/actions.ts","store/message/reducers.ts","store/media/actions.ts","store/media/reducers.ts","store/rootReducer.ts","dataPost.ts","store/auth/sagas.ts","store/user/sagas.ts","store/contacts/sagas.ts","store/chat/sagas.ts","store/message/sagas.ts","store/media/sagas.ts","store/rootSaga.ts","components/Registration/index.tsx","components/Authorization/index.tsx","components/User/index.tsx","components/ButtonWithPopup/index.tsx","components/Sidebar/index.tsx","components/Empty/index.tsx","components/Header/index.tsx","components/Chat/index.tsx","components/ButtonWithEmoji/index.tsx","components/MessageInput/index.tsx","components/ChatWindow/index.tsx","components/Main/index.tsx","components/Profile/index.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/ButtonWithPopup/style.module.css","img/user_avatar.png","components/MessageInput/style.module.css","components/Registration/style.module.scss","components/Authorization/style.module.scss","components/ButtonWithEmoji/style.module.css","components/Profile/style.module.css"],"names":["history","createBrowserHistory","authByCreds","createAsyncAction","regByCreds","logout","createAction","initialState","authData","authToken","id","login","error","getUser","updateAvatar","userData","_id","createdAt","nick","avatar","url","chats","getContacts","contactsData","getActiveChat","addChat","activeChatId","activeChatName","chatData","owner","title","members","messages","sendMessage","onMessage","message","messageData","chat","text","uploadAvatar","avatarData","mediaData","originalFileName","type","userAvatar","chatAvatar","rootReducer","combineReducers","router","connectRouter","auth","state","action","getType","actions","success","payload","failure","user","contacts","activeChat","newChat","media","dataPost","Authorization","query","variables","a","fetch","method","headers","body","JSON","stringify","response","result","json","ok","Error","authByCredsSaga","regByCredsSaga","logoutSaga","localStorage","getItem","decoded","jwtDecode","sub","putResolve","put","push","take","request","console","log","call","getAuthToken","password","setItem","Promise","res","setTimeout","loginContent","data","regUser","regContent","UserUpsert","clear","getUserSaga","updateAvatarSaga","select","userId","getActiveUser","userQuery","userContent","UserFindOne","user_id","image_id","getContactsSaga","getContactsList","сontacts","сontactsContent","UserFind","getActiveChatSaga","addChatSaga","activeUserId","getNameOfChat","chatId","chatQuery","chatContent","ChatFindOne","member","find","addNewChat","firstMember_id","secondMember_id","newChatContent","ChatUpsert","sendMessageSaga","onMessageSaga","chat_id","messageContent","MessageUpsert","uploadAvatarSaga","form","getNewImageData","imageData","FormData","rootSaga","all","spawn","connect","dispatch","bindActionCreators","authActions","React","memo","useState","setNick","setLogin","setPassword","onSubmit","e","preventDefault","className","style","loginForm","htmlFor","required","value","onChange","target","buttonBlock","to","props","onClick","src","avatarSrc","alt","name","ButtonWithPopup","isOpenedPopup","isAvatarUpload","myRef","createRef","myFormRef","closePopup","event","current","contains","setState","togglePopup","logoutHandler","prevProps","prevState","this","document","addEventListener","removeEventListener","buttonWithPopup","navOpener","icon","ref","popup","popupHeader","uploadForm","encType","uploadBtnWrapper","changeButton","uploadInput","okButton","imageId","navSidebar","navList","navItem","PureComponent","mediaAction","userAction","contactsAction","chatActions","useEffect","getDetailsOfChat","length","memberAvatar","checkMemberInChats","contactId","contactsChats","map","forEach","key","contact","Empty","userName","Chat","chatsRef","scrollToBottom","scrollTop","scrollHeight","milliseconds","formattedDate","Date","hours","getFormattedTime","getHours","minutes","getMinutes","timeUnit","videoArray","match","videoId","href","width","frameBorder","allow","allowFullScreen","encrypted-media","picture-in-picture","isUserMsg","data-name","data-user","data-text","data-number","getFormattedMessage","getTime","ButtonWithEmoji","closeEmoji","isOpenedEmoji","toggleEmoji","emojiObj","buttonWithEmoji","emojiBlock","set","onSelect","emoji","addEmoji","messageActions","setText","trim","messageInput","placeholder","native","UserActions","messageAction","socket","io","emit","on","profile","exact","path","component","Registration","from","Profile","render","library","add","faSmile","faPaperclip","faPaperPlane","faBars","faUserFriends","faComments","faSignOutAlt","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","routerMiddleware","run","App","Boolean","window","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.cd5da13b.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory()","import { createAction, createAsyncAction } from \"typesafe-actions\";\r\nimport { AuthCreds, RegCreds, AuthSuccessData } from \"./types\";\r\n\r\nexport const authByCreds = createAsyncAction(\r\n    \"auth/AUTH_BY_CREDS_REQUEST\",\r\n    \"auth/AUTH_BY_CREDS_SUCCESS\",\r\n    \"auth/AUTH_BY_CREDS_FAILURE\"\r\n)<AuthCreds, AuthSuccessData, string>();\r\n\r\nexport const regByCreds = createAsyncAction(\r\n    \"auth/REG_BY_CREDS_REQUEST\",\r\n    \"auth/REG_BY_CREDS_SUCCESS\",\r\n    \"auth/REG_BY_CREDS_FAILURE\"\r\n)<RegCreds, AuthSuccessData, string>();\r\n\r\nexport const logout = createAction(\r\n    \"auth/LOGOUT\"\r\n)();","import { getType } from \"typesafe-actions\";\r\n\r\nimport { AuthState, AuthAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: AuthState = {\r\n    authData: {\r\n        authToken: null,\r\n        id: '',\r\n        login: '',\r\n        error: null\r\n    }\r\n}\r\n\r\nexport default (state: AuthState = initialState, action: AuthAction): AuthState => {\r\n    switch (action.type) {\r\n        case getType(actions.authByCreds.success):\r\n            return {\r\n                ...state, \r\n                authData: {\r\n                    ...state.authData, \r\n                    authToken: action.payload.authToken, \r\n                    id: action.payload.id, \r\n                    login: action.payload.login, \r\n                    error: null\r\n                } \r\n            }\r\n        case getType(actions.authByCreds.failure):\r\n            return {\r\n                ...state,\r\n                authData: {\r\n                    ...state.authData,\r\n                    authToken: null,\r\n                    error: action.payload\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { UserData, UpdateAvatarCreds } from \"./types\";\r\n\r\nexport const getUser = createAsyncAction(\r\n    \"user/GET_USER_REQUEST\",\r\n    \"user/GET_USER_SUCCESS\",\r\n    \"user/GET_USER_FAILURE\"\r\n)<void, UserData, string>();\r\n\r\n\r\nexport const updateAvatar = createAsyncAction(\r\n    \"media/UPDATE_AVATAR_REQUEST\",\r\n    \"media/UPDATE_AVATAR_SUCCESS\",\r\n    \"media/UPDATE_AVATAR_FAILURE\"\r\n)<UpdateAvatarCreds, UserData, string>();","import { getType } from \"typesafe-actions\";\r\n\r\nimport { UserState, UserAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: UserState = {\r\n    error: null,\r\n    userData: {\r\n        _id: '',\r\n        createdAt: '',\r\n        login: '',\r\n        nick : '',\r\n        avatar: {\r\n            _id: '',\r\n            url: ''\r\n        },\r\n        chats: []\r\n    }\r\n}\r\n\r\nexport default (state: UserState = initialState, action: UserAction): UserState => {\r\n    switch (action.type) {\r\n        case getType(actions.getUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.getUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.updateAvatar.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.updateAvatar.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }    \r\n        default:\r\n            return state\r\n    }\r\n}","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { UserData } from \"./types\";\r\n\r\nexport const getContacts = createAsyncAction(\r\n    \"contacts/GET_CONTACTS_REQUEST\",\r\n    \"contacts/GET_CONTACTS_SUCCESS\",\r\n    \"contacts/GET_CONTACTS_FAILURE\"\r\n)<void, UserData[], string>();","import { getType } from \"typesafe-actions\";\r\n\r\nimport { ContactsState, ContactsAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: ContactsState = {\r\n    error: null,\r\n    contactsData: []\r\n}\r\n\r\nexport default (state: ContactsState = initialState, action: ContactsAction): ContactsState => {\r\n    switch (action.type) {\r\n        case getType(actions.getContacts.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                contactsData:[\r\n                    ...state.contactsData,\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case getType(actions.getContacts.failure):\r\n            return {\r\n                ...state,\r\n                contactsData:[],\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { ChatSuccessData, AddChatSuccessData } from \"./types\";\r\n\r\nexport const getActiveChat = createAsyncAction(\r\n    \"chat/GET_ACTIVE_CHAT_REQUEST\",\r\n    \"chat/GET_ACTIVE_CHAT_SUCCESS\",\r\n    \"chat/GET_ACTIVE_CHAT_FAILURE\"\r\n)<string, ChatSuccessData, string>();\r\n\r\nexport const addChat = createAsyncAction(\r\n    \"chat/ADD_CHAT_REQUEST\",\r\n    \"chat/ADD_CHAT_SUCCESS\",\r\n    \"chat/ADD_CHAT_FAILURE\"\r\n)<string, AddChatSuccessData, string>();","import { getType } from \"typesafe-actions\";\r\n\r\nimport { ChatState, ChatAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: ChatState = {\r\n    activeChatId: null,\r\n    activeChatName: \"Chat\",\r\n    error: null,\r\n    chatData: {\r\n        _id: '',\r\n        owner: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        title: '',\r\n        createdAt: '',\r\n        members: [],\r\n        messages: [],\r\n        avatar: {\r\n            _id: '',\r\n            url: ''\r\n        }\r\n    }\r\n}\r\n\r\nexport default (state: ChatState = initialState, action: ChatAction): ChatState => {\r\n    switch (action.type) {\r\n        case getType(actions.getActiveChat.success):\r\n            return {\r\n                ...state,\r\n                activeChatId: action.payload.activeChatId,\r\n                activeChatName: action.payload.activeChatName,\r\n                error: null,\r\n                chatData: action.payload.activeChat\r\n            }\r\n        case getType(actions.getActiveChat.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.addChat.success):\r\n            return {\r\n                ...state,\r\n                activeChatId: action.payload.activeChatId,\r\n                error: null,\r\n                chatData: action.payload.newChat\r\n            }\r\n        case getType(actions.addChat.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createAsyncAction, createAction } from \"typesafe-actions\";\r\nimport { MessageCreds, MessageData } from \"./types\";\r\n\r\nexport const sendMessage = createAsyncAction(\r\n    \"message/SEND_MESSAGE_REQUEST\",\r\n    \"message/SEND_MESSAGE_SUCCESS\",\r\n    \"message/SEND_MESSAGE_FAILURE\"\r\n)<MessageCreds, MessageData, string>();\r\n\r\nexport const onMessage = createAction(\r\n    \"message/ON_MESSAGE\", (message: MessageData) => message\r\n)();","import { getType } from \"typesafe-actions\";\r\n\r\nimport { MessageState, MessageAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: MessageState = {\r\n    error: null,\r\n    messageData: {\r\n        _id: '',\r\n        createdAt: '',\r\n        owner: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        chat: {\r\n            _id: '',\r\n            owner: {\r\n                _id: '',\r\n                login: '',\r\n                nick : '',\r\n                avatar: {\r\n                    _id: '',\r\n                    url: ''\r\n                }\r\n            },\r\n            title: '',\r\n            createdAt: '',\r\n            members: [],\r\n            messages: [],\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        text: ''\r\n    }\r\n}\r\n\r\nexport default (state: MessageState = initialState, action: MessageAction): MessageState => {\r\n    switch (action.type) {\r\n        case getType(actions.sendMessage.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                messageData: action.payload,\r\n            }\r\n        case getType(actions.sendMessage.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.onMessage):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                messageData: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { AvatarData } from \"./types\";\r\n\r\nexport const uploadAvatar = createAsyncAction(\r\n    \"media/UPLOAD_AVATAR_REQUEST\",\r\n    \"media/UPLOAD_AVATAR_SUCCESS\",\r\n    \"media/UPLOAD_AVATAR_FAILURE\"\r\n)<HTMLFormElement, AvatarData, string>();","import { getType } from \"typesafe-actions\";\r\n\r\nimport { MediaState, MediaAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: MediaState = {\r\n    error: null,\r\n    avatarData: {\r\n        _id: '',\r\n        url: ''\r\n    },\r\n    mediaData: {\r\n        _id: '',\r\n        createdAt: '',\r\n        owner: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        text: '',\r\n        url: '',\r\n        originalFileName: '',\r\n        type: '',\r\n        userAvatar: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        chatAvatar: [],\r\n        messages: []\r\n    }\r\n}\r\n\r\nexport default (state: MediaState = initialState, action: MediaAction): MediaState => {\r\n    switch (action.type) {\r\n        case getType(actions.uploadAvatar.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                avatarData: action.payload\r\n            }\r\n        case getType(actions.uploadAvatar.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { EmptyAction, StateType } from \"typesafe-actions\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport { history } from \"../history\";\r\n\r\nimport { AuthAction } from \"./auth/types\";\r\nimport authReducer from './auth/reducers'\r\nimport { UserAction } from \"./user/types\";\r\nimport userReducer from './user/reducers'\r\nimport { ContactsAction } from \"./contacts/types\";\r\nimport contactsReducer from './contacts/reducers'\r\nimport { ChatAction } from \"./chat/types\";\r\nimport chatReducer from './chat/reducers'\r\nimport { MessageAction } from \"./message/types\";\r\nimport messageReducer from './message/reducers'\r\nimport { MediaAction } from \"./media/types\";\r\nimport mediaReducer from './media/reducers'\r\n\r\nconst rootReducer = combineReducers({\r\n    router: connectRouter(history),\r\n    auth: authReducer,\r\n    user: userReducer,\r\n    contacts: contactsReducer,\r\n    chat: chatReducer,\r\n    message: messageReducer,\r\n    media: mediaReducer\r\n})\r\n\r\nexport type IRootState = StateType<typeof rootReducer>\r\nexport type IRootAction = AuthAction \r\n                        | UserAction \r\n                        | ContactsAction \r\n                        | ChatAction \r\n                        | MessageAction\r\n                        | MediaAction\r\n                        | EmptyAction<string>\r\n\r\nexport default rootReducer","interface variablesData {\n    \"login\"?: string\n    \"password\"?: string\n    \"nick\"?: string\n    \"userQuery\"?: string\n    \"chatQuery\"?: string\n    \"chat_id\"?: string\n    \"text\"?: string\n    \"firstMember_id\"?: string\n    \"secondMember_id\"?: string\n    \"user_id\"?: string\n    \"image_id\"?: string\n}\n\nexport const dataPost = async (url: string, Authorization: string, query: string, variables?: variablesData) => {\n    try {\n        const response = await fetch(url, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': Authorization\n            },\n            body: JSON.stringify({\n                query: query,\n                variables: variables\n            })\n        });\n        const result = response.json();\n        return response.ok ? result : new Error('Status is not 200')\n    } catch (error) {\n        return new Error('dataPost failed')\n    }\n}","import { take, call, put, putResolve } from 'redux-saga/effects';\r\nimport { push } from 'connected-react-router';\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nimport * as actions from './actions'\r\nimport { DecodedToken } from './types'\r\nimport { dataPost } from '../../dataPost'\r\n\r\nexport function* authByCredsSaga() {\r\n    const authToken = localStorage.getItem('authToken')\r\n    if (authToken) {\r\n        const decoded: DecodedToken = jwtDecode(authToken);\r\n        const id = decoded.sub.id\r\n        const login = decoded.sub.login\r\n        yield putResolve(actions.authByCreds.success({authToken, id, login}))\r\n        yield put(push('/profile'))\r\n    }\r\n    while (true) {\r\n        const { payload } = yield take(actions.authByCreds.request)\r\n        console.log(\"authByCredsSaga -> payload\", payload)\r\n        try {\r\n            const authToken = yield call(getAuthToken, payload.login, payload.password)\r\n            console.log(\"authByCredsSaga -> authToken\", authToken)\r\n            if (authToken) {\r\n                const decoded: DecodedToken = jwtDecode(authToken)\r\n                const id = decoded.sub.id\r\n                const login = decoded.sub.login\r\n                localStorage.setItem('authToken', authToken)\r\n                yield putResolve(actions.authByCreds.success({ authToken, id, login }))\r\n                yield put(push('/profile'))\r\n            } else {\r\n                yield put(actions.authByCreds.failure('Wrong login or password'))\r\n            }\r\n        } catch (error) {\r\n            console.error(\"authByCredsSaga -> error\", error)\r\n            yield put(actions.authByCreds.failure(error.message))\r\n        }\r\n    }\r\n}\r\n\r\nconst logInQuery = `query log ($login:String, $password:String) {\r\n        login(login:$login, password:$password)\r\n    }`\r\n\r\nconst getAuthToken = async (login: string, password: string) => {\r\n    await new Promise((res) => setTimeout(res, 1000))\r\n    let loginContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', '', logInQuery, \r\n        {\r\n            \"login\": login,\r\n            \"password\": password\r\n        })\r\n    return loginContent.data.login\r\n}\r\n\r\nexport function* regByCredsSaga() {\r\n    while (true) {\r\n        const { payload } = yield take(actions.regByCreds.request)\r\n        console.log(\"regByCredsSaga -> payload\", payload)\r\n        try {\r\n            const user = yield call(regUser, payload.nick, payload.login, payload.password)\r\n            console.log(\"regByCredsSaga -> user\", user)\r\n            const authToken = yield call(getAuthToken, payload.login, payload.password)\r\n            console.log(\"regByCredsSaga -> authToken\", authToken)\r\n            if (authToken) {\r\n                const decoded: DecodedToken = jwtDecode(authToken)\r\n                const id = decoded.sub.id\r\n                const login = decoded.sub.login\r\n                localStorage.setItem('authToken', authToken)\r\n                yield putResolve(actions.authByCreds.success({ authToken, id, login }))\r\n                yield put(push('/profile'))\r\n            } else {\r\n                yield put(actions.authByCreds.failure('Wrong login or password'))\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            yield put(actions.regByCreds.failure(error.message))\r\n        }\r\n    }\r\n}\r\n\r\nconst registrationQuery = `mutation reg($nick:String, $login:String, $password:String) {\r\n    UserUpsert(user: {nick:$nick, login:$login, password:$password}) {\r\n        _id createdAt login nick\r\n        avatar{\r\n            _id, url\r\n        }\r\n    }\r\n}`\r\n\r\nconst regUser = async (nick: string, login: string, password: string) => {\r\n    await new Promise((res) => setTimeout(res, 1000))\r\n    let regContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', '', registrationQuery,\r\n        {\r\n            \"nick\": nick,\r\n            \"login\": login,\r\n            \"password\": password\r\n        }  \r\n    )\r\n    return regContent.data.UserUpsert\r\n}\r\n\r\nexport function* logoutSaga() {\r\n    while (true) {\r\n        yield take(actions.logout)\r\n        localStorage.clear();\r\n        yield put(push('/sign-in'))\r\n    }\r\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\n// import { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { dataPost } from '../../dataPost'\r\n\r\nexport function* getUserSaga() {\r\n  while (true) {\r\n    yield take(actions.getUser.request)\r\n    console.log(\"getUserSaga\")\r\n    try {\r\n      const userId = yield select(state => state.auth.authData.id)\r\n      const user = yield call(getActiveUser, userId)\r\n      console.log(\"getUserSaga -> user\", user)\r\n      yield putResolve(actions.getUser.success(user))\r\n      // yield put(push('/user'))\r\n    } catch (error) {\r\n      console.error(\"getUserSaga -> error\", error)\r\n      yield put(actions.getUser.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst getActiveUserQuery = `query getUsers($userQuery: String){\r\n  UserFindOne(query: $userQuery){\r\n    _id\r\n    login\r\n    nick\r\n    createdAt\r\n    avatar{\r\n      _id, url\r\n    }\r\n    chats{\r\n      _id\r\n      createdAt\r\n      title\r\n      owner{\r\n        _id login nick\r\n        avatar{\r\n          _id, url\r\n        }\r\n      }\r\n      members{\r\n        _id login nick\r\n        avatar{\r\n          _id, url\r\n        }\r\n      }\r\n      messages{\r\n        _id createdAt text\r\n        owner{\r\n          _id login nick\r\n          avatar{\r\n            _id, url\r\n          }\r\n        }\r\n      }\r\n      avatar{\r\n        _id, url\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst getActiveUser = async (userId: string) => {\r\n  const userQuery = `[{\"_id\": \"${userId}\"}]`\r\n  let userContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', \r\n    `Bearer ${localStorage.authToken}`,\r\n    getActiveUserQuery,\r\n    {\r\n      \"userQuery\": userQuery\r\n    }\r\n  )\r\n  console.log(userContent.data)\r\n  return userContent.data.UserFindOne\r\n}\r\n\r\nexport function* updateAvatarSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.updateAvatar.request)\r\n    console.log(\"updateAvatarSaga\", payload)\r\n    try {\r\n      const userData = yield call(updateAvatar, payload.user_id, payload.image_id)\r\n      console.log(\"updateAvatarSaga -> userData\", userData)\r\n      yield putResolve(actions.updateAvatar.success(userData))\r\n    } catch (error) {\r\n      console.error(\"updateAvatarSaga -> error\", error)\r\n      yield put(actions.updateAvatar.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst updateAvatarQuery = `mutation updateAvatar($user_id: ID, $image_id: ID) {\r\n  UserUpsert(user: {_id: $user_id, \r\n    avatar: {_id: $image_id}}) {\r\n        _id\r\n    login\r\n    nick\r\n    createdAt\r\n    avatar {\r\n      _id\r\n      url\r\n    }\r\n    chats {\r\n      _id\r\n      createdAt\r\n      owner {\r\n        _id\r\n        login\r\n        nick\r\n      }\r\n      title\r\n      members {\r\n        _id\r\n        login\r\n        nick\r\n      }\r\n      messages {\r\n        _id\r\n        createdAt\r\n        text\r\n        owner {\r\n          _id\r\n          login\r\n          nick\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst updateAvatar = async (user_id: string, image_id: string) => {\r\n  let userContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', \r\n    `Bearer ${localStorage.authToken}`,\r\n    updateAvatarQuery,\r\n    {\r\n      \"user_id\": user_id,\r\n      \"image_id\": image_id\r\n    }\r\n  )\r\n  console.log('userContent.data.UserUpsert', userContent.data.UserUpsert)\r\n  return userContent.data.UserUpsert\r\n}","import { take, call, put, putResolve } from 'redux-saga/effects';\r\n// import { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { dataPost } from '../../dataPost'\r\n\r\nexport function* getContactsSaga() {\r\n  while (true) {\r\n    yield take(actions.getContacts.request)\r\n    console.log(\"getContactsSaga\")\r\n    try {\r\n      const сontacts = yield call(getContactsList)\r\n      console.log(\"getContactsSaga -> сontacts\", сontacts)\r\n      yield putResolve(actions.getContacts.success(сontacts))\r\n      // yield put(push('/user'))\r\n    } catch (error) {\r\n      console.error(\"getContactsSaga -> error\", error)\r\n      yield put(actions.getContacts.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst getContactsListQuery = `query users {\r\n  UserFind(query:\"[{}]\"){\r\n    _id\r\n    login\r\n    nick\r\n    createdAt\r\n    avatar{\r\n      _id, url\r\n    }\r\n  }\r\n}`\r\n\r\nconst getContactsList = async () => {\r\n  let сontactsContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', \r\n    `Bearer ${localStorage.authToken}`,\r\n    getContactsListQuery\r\n  )\r\n  console.log(сontactsContent.data)\r\n  return сontactsContent.data.UserFind\r\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\n// import { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { dataPost } from '../../dataPost'\r\nimport { ChatData } from '../user/types';\r\n\r\nexport function* getActiveChatSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.getActiveChat.request)\r\n    console.log(\"getActiveChatSaga\")\r\n    try {\r\n      const activeUserId = yield select(state => state.auth.authData.id)\r\n      const activeChat = yield call(getActiveChat, payload)\r\n      console.log(\"getActiveChatSaga -> activeChat\", activeChat)\r\n      const activeChatId = activeChat._id\r\n      const activeChatName = yield call(getNameOfChat, activeChat, activeUserId)\r\n      yield putResolve(actions.getActiveChat.success({ activeChat, activeChatId, activeChatName }))\r\n    } catch (error) {\r\n      console.error(\"getActiveChatSaga -> error\", error)\r\n      yield put(actions.getActiveChat.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst getActiveChatQuery = `query getActiveChat($chatQuery: String){\r\n  ChatFindOne(query: $chatQuery){\r\n    _id title createdAt\r\n    owner {\r\n      _id login nick\r\n      avatar{\r\n        _id, url\r\n      }\r\n    }\r\n        avatar{\r\n      _id, url\r\n    }\r\n    members{\r\n      _id login nick\r\n      avatar{\r\n        _id, url\r\n      }\r\n    }\r\n    messages{\r\n      _id text createdAt \r\n      owner{\r\n        _id\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst getActiveChat = async (chatId: string) => {\r\n  const chatQuery = `[{\"_id\": \"${chatId}\"}]`\r\n  let chatContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', \r\n    `Bearer ${localStorage.authToken}`,\r\n    getActiveChatQuery,\r\n    {\r\n      \"chatQuery\": chatQuery\r\n    }\r\n  )\r\n  console.log('chatContent.data.ChatFindOne', chatContent.data.ChatFindOne)\r\n  return chatContent.data.ChatFindOne\r\n}\r\n\r\nconst getNameOfChat = (activeChat: ChatData, activeUserId: string) => {\r\n  if (activeChat.title) {\r\n    return activeChat.title\r\n  } else {\r\n    let member = activeChat.members.find(member => {\r\n      return member._id !== activeUserId\r\n    })\r\n    console.log(\"member\", member)\r\n    return member && (member.nick ? member.nick : member.login)\r\n  }\r\n}\r\n\r\nexport function* addChatSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.addChat.request)\r\n    console.log(\"addChatSaga\")\r\n    try {\r\n      const activeUserId = yield select(state => state.auth.authData.id)\r\n      const newChat = yield call(addNewChat, activeUserId,  payload)\r\n      console.log(\"addChatSaga -> newChat\", newChat)\r\n      const activeChatId = newChat._id\r\n      yield putResolve(actions.addChat.success({ newChat, activeChatId }))\r\n      const activeChat = yield call(getActiveChat, activeChatId)\r\n      const activeChatName = yield call(getNameOfChat, activeChat, activeUserId)\r\n      yield putResolve(actions.getActiveChat.success({ activeChat, activeChatId, activeChatName }))\r\n    } catch (error) {\r\n      console.error(\"addChatSaga -> error\", error)\r\n      yield put(actions.addChat.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst addNewChatQuery = `mutation addChat ($firstMember_id:ID, $secondMember_id:ID)  {\r\n  ChatUpsert(chat: {   \r\n\t\tmembers: [\r\n      {_id: $firstMember_id}, {_id: $secondMember_id}\r\n    ]}) {\r\n    _id\r\n    members {\r\n      _id\r\n      login\r\n      nick\r\n    }\r\n    messages {\r\n      _id\r\n      createdAt\r\n      text\r\n      owner {\r\n        _id\r\n        login\r\n        nick\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst addNewChat = async (firstMember_id: string, secondMember_id: string) => {\r\n  let newChatContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', \r\n    `Bearer ${localStorage.authToken}`,\r\n    addNewChatQuery,\r\n    {\r\n      \"firstMember_id\": firstMember_id,\r\n      \"secondMember_id\": secondMember_id\r\n    }\r\n  )\r\n  console.log('chatContent.data.ChatUpsert', newChatContent.data.ChatUpsert)\r\n  return newChatContent.data.ChatUpsert\r\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\n// import { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { getActiveChat } from '../chat/actions'\r\nimport { dataPost } from '../../dataPost'\r\n\r\nexport function* sendMessageSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.sendMessage.request)\r\n    console.log(\"sendMessageSaga\")\r\n    try {\r\n      const message = yield call(sendMessage, payload.activeChatId, payload.text)\r\n      console.log(\"sendMessageSaga -> message\", message)\r\n      yield putResolve(actions.sendMessage.success(message))\r\n    } catch (error) {\r\n      console.error(\"sendMessageSaga -> error\", error)\r\n      yield put(actions.sendMessage.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst sendMessageQuery = `mutation sendMessage ($chat_id:ID, $text:String) {\r\n  MessageUpsert(message: {\r\n      chat: {_id: $chat_id}, \r\n      text: $text\r\n  }) {\r\n    _id\r\n    createdAt\r\n    text\r\n    owner {\r\n      _id\r\n      login\r\n      nick\r\n    }\r\n  }\r\n}`\r\n\r\nconst sendMessage = async (chat_id: string, text: string) => {\r\n  let messageContent = await dataPost('http://chat.fs.a-level.com.ua/graphql', \r\n    `Bearer ${localStorage.authToken}`,\r\n    sendMessageQuery,\r\n    {\r\n      \"chat_id\": chat_id,\r\n      \"text\": text\r\n    }\r\n  )\r\n  console.log(\"chat_id\", chat_id, \"text\", text)\r\n  console.log('messageContent.data.MessageUpsert', messageContent.data.MessageUpsert)\r\n  return messageContent.data.MessageUpsert\r\n}\r\n\r\n\r\nexport function* onMessageSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.onMessage)\r\n    console.log(\"msg\", payload)\r\n    const activeChatId = yield select(state => state.chat.activeChatId)\r\n    yield put(getActiveChat.request(activeChatId))\r\n  }\r\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\n\r\nimport * as actions from './actions'\r\nimport { dataPost } from '../../dataPost'\r\n\r\nexport function* uploadAvatarSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.uploadAvatar.request)\r\n    console.log(\"uploadAvatarSaga\", payload.form)\r\n    try {\r\n      const imageData = yield call(getNewImageData, payload)\r\n      console.log(\"uploadAvatarSaga -> image\", imageData)\r\n      yield putResolve(actions.uploadAvatar.success(imageData))\r\n    } catch (error) {\r\n      console.error(\"uploadAvatarSaga -> error\", error)\r\n      yield put(actions.uploadAvatar.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nlet getNewImageData = async (form: HTMLFormElement) => {\r\n    try {\r\n        console.log(form)\r\n        const response = await fetch('http://chat.fs.a-level.com.ua/upload', \r\n                        {\r\n                          method: \"POST\",\r\n                          headers: localStorage.authToken ? { Authorization: 'Bearer ' + localStorage.authToken } : {},\r\n                          body: new FormData(form)\r\n                        }  );\r\n        console.log(response)\r\n        const result = response.json();\r\n        return response.ok ? result : new Error('status is not 200')\r\n    } catch (error) {\r\n        return new Error('dataPost failed')\r\n    }\r\n}","import { all, spawn } from \"redux-saga/effects\";\r\nimport { authByCredsSaga, regByCredsSaga, logoutSaga } from \"./auth/sagas\";\r\nimport { getUserSaga, updateAvatarSaga } from \"./user/sagas\";\r\nimport { getContactsSaga } from \"./contacts/sagas\";\r\nimport { getActiveChatSaga } from \"./chat/sagas\";\r\nimport { addChatSaga } from \"./chat/sagas\";\r\nimport { sendMessageSaga, onMessageSaga } from \"./message/sagas\";\r\nimport { uploadAvatarSaga } from \"./media/sagas\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    spawn(authByCredsSaga),\r\n    spawn(regByCredsSaga),\r\n    spawn(getUserSaga),\r\n    spawn(getContactsSaga),\r\n    spawn(getActiveChatSaga),\r\n    spawn(sendMessageSaga),\r\n    spawn(addChatSaga),\r\n    spawn(logoutSaga),\r\n    spawn(onMessageSaga),\r\n    spawn(uploadAvatarSaga),\r\n    spawn(updateAvatarSaga),\r\n  ]);\r\n}\r\n","import React from \"react\";\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport { IRootAction } from \"../../store/rootReducer\";\r\nimport * as authActions from \"../../store/auth/actions\";\r\n\r\nimport style from './style.module.scss'\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\r\n  bindActionCreators(\r\n    {\r\n      regByCreds: authActions.regByCreds.request\r\n    },\r\n    dispatch\r\n  );\r\n\r\ntype AuthorizationProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst Authorization: React.FC<AuthorizationProps> = ({ regByCreds }) => {\r\n  const [nick, setNick] = React.useState(\"\");\r\n  const [login, setLogin] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n\r\n  const signUpHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    regByCreds({ nick, login, password })\r\n  }\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={signUpHandler} className = {style.loginForm}>\r\n      <label htmlFor=\"nick\">Nick</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nick\"\r\n        required={true}\r\n        value={nick}\r\n        onChange={e => setNick(e.target.value)}\r\n      />\r\n\r\n      <label htmlFor=\"login\">Login</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"login\"\r\n        required={true}\r\n        value={login}\r\n        onChange={e => setLogin(e.target.value)}\r\n      />\r\n\r\n      <label htmlFor=\"password\">Password</label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"password\"\r\n        required={true}\r\n        value={password}\r\n        onChange={e => setPassword(e.target.value)}\r\n      />\r\n      <div className = {style.buttonBlock}>\r\n         <button type=\"submit\">Sign Up</button>\r\n      </div>\r\n      <p><Link to=\"/sign-in\">Sign In</Link></p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(React.memo(Authorization));","import React from \"react\";\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport { IRootAction } from \"../../store/rootReducer\";\r\nimport * as authActions from \"../../store/auth/actions\";\r\n\r\nimport style from './style.module.scss'\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\r\n  bindActionCreators(\r\n    {\r\n      authByCreds: authActions.authByCreds.request\r\n    },\r\n    dispatch\r\n  );\r\n\r\n  \r\ntype AuthorizationProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst Authorization: React.FC<AuthorizationProps> = ({ authByCreds }) => {\r\n  const [login, setLogin] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n\r\n  const signInHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    authByCreds({ login, password })\r\n  }\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={signInHandler} className = {style.loginForm}>\r\n      <label htmlFor=\"login\">Login</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"login\"\r\n        required={true}\r\n        value={login}\r\n        onChange={e => setLogin(e.target.value)}\r\n      />\r\n      <label htmlFor=\"password\">Password</label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"password\"\r\n        required={true}\r\n        value={password}\r\n        onChange={e => setPassword(e.target.value)}\r\n      />\r\n      <div className = {style.buttonBlock}>\r\n         <button type=\"submit\">Sign In</button>\r\n      </div>\r\n      <p>New to Chat? <Link to=\"/registration\">Join now</Link></p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(React.memo(Authorization));","import React from \"react\";\nimport \"./User.css\";\n\ninterface Props {\n\tname: any,\n  avatarSrc: string,\n  onClick?: any\n}\n\nconst User = (props: Props) => {\n  return (  \n    <div className=\"User\" onClick={props.onClick}>\n      <img src={props.avatarSrc} alt=\"avatar\" className=\"UserImg\" />\n      <div className=\"UserDetails\">\n        <p className=\"UseDetailsName\">{props.name}</p>\n      </div>\n    </div>\n  );\n};\nexport default React.memo(User);","import React, { useRef } from \"react\";\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport { IRootAction, IRootState } from \"../../store/rootReducer\";\r\nimport * as actions from \"../../store/auth/actions\";\r\nimport * as mediaAction from \"../../store/media/actions\";\r\nimport * as userAction from \"../../store/user/actions\";\r\n\r\nimport style from './style.module.css'\r\nimport userAvatar from '../../img/user_avatar.png'\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  activeUserId: state.user.userData._id,\r\n  avatar: state.user.userData.avatar ? `http://chat.fs.a-level.com.ua/${state.user.userData.avatar.url}` : userAvatar,\r\n  imageId: state.media.avatarData._id\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\r\n  bindActionCreators(\r\n    {\r\n      logout: actions.logout,\r\n      uploadAvatar: mediaAction.uploadAvatar.request,\r\n      updateAvatar: userAction.updateAvatar.request,\r\n    },\r\n    dispatch\r\n  );\r\n\r\ntype ButtonWithPopupProps = ReturnType<typeof mapStateToProps> &\r\n  ReturnType<typeof mapDispatchToProps>\r\n\r\ninterface State {\r\n  isOpenedPopup: boolean\r\n  isAvatarUpload: boolean\r\n}\r\n\r\nclass ButtonWithPopup extends React.PureComponent<ButtonWithPopupProps> {\r\n\r\n  state = {\r\n    isOpenedPopup: false,\r\n    isAvatarUpload: false\r\n  };\r\n\r\n  myRef = React.createRef<HTMLDivElement>()\r\n  myFormRef = React.createRef<HTMLFormElement>()\r\n\r\n  closePopup = (event: any) => {\r\n    console.log(this.myRef)\r\n    if (this.myRef.current && !(this.myRef.current.contains(event.target))) {\r\n      console.log(\"TCL: Button -> closePopup -> event\", event)\r\n      this.setState({\r\n        isOpenedPopup: false\r\n      })\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps: {}, prevState: State) {\r\n    if (prevState.isOpenedPopup === this.state.isOpenedPopup) {\r\n      return;\r\n    }\r\n    if (this.state.isOpenedPopup) {\r\n      console.log(\"addEventListener\", prevState);\r\n      document.addEventListener(\"click\", this.closePopup);\r\n    } else {\r\n      console.log(\"removeEventListener\");\r\n      document.removeEventListener(\"click\", this.closePopup);\r\n    }\r\n  }\r\n\r\n  togglePopup = () => {\r\n    this.setState({\r\n      isOpenedPopup: !this.state.isOpenedPopup\r\n    })\r\n  }\r\n\r\n  // uploadAvatar = async (e: any) => {\r\n  //   let form = new FormData();\r\n  //   console.log(e.target.files[0])\r\n  //   form.append('media', e.target.files[0]);\r\n  //   this.props.uploadAvatar(form)\r\n  // }\r\n\r\n  uploadAvatar = (form: any) => {\r\n    this.props.uploadAvatar(form)\r\n    this.setState({\r\n      isAvatarUpload: !this.state.isAvatarUpload\r\n    })\r\n  }\r\n\r\n  updateAvatar = (user_id: string, image_id: string | null) => {\r\n    this.props.updateAvatar({ user_id, image_id })\r\n  }\r\n\r\n  logoutHandler = () => {\r\n    this.props.logout()\r\n  }\r\n\r\n  render() {\r\n    const { isOpenedPopup, isAvatarUpload } = this.state;\r\n    return (\r\n      <div className={style.buttonWithPopup}>\r\n        <button onClick={this.togglePopup} className={style.navOpener}>\r\n          <FontAwesomeIcon icon=\"bars\" />\r\n        </button>\r\n        {isOpenedPopup &&\r\n          <div ref={this.myRef} className={style.popup}>\r\n            <div className={style.popupHeader}>\r\n              <img src={this.props.avatar} />\r\n              <form className={style.uploadForm}\r\n                ref={this.myFormRef}\r\n                method=\"post\"\r\n                action='/upload'\r\n                encType=\"multipart/form-data\"\r\n                id=\"form\"\r\n              >\r\n              <div className={style.uploadBtnWrapper}>\r\n                  <button className={style.changeButton}>\r\n                    Change avatar\r\n                  </button>\r\n                  <input\r\n                    className={style.uploadInput}\r\n                    type=\"file\"\r\n                    name=\"media\"\r\n                    id=\"media\"\r\n                    onChange={() => { if (this.myFormRef.current) this.uploadAvatar(this.myFormRef.current) }}\r\n                  />\r\n                </div>\r\n              </form>\r\n              { isAvatarUpload &&\r\n                <button\r\n                  className={style.okButton}\r\n                  onClick={() => this.updateAvatar(this.props.activeUserId, this.props.imageId)}\r\n                >\r\n                  Ok\r\n                </button>\r\n              }\r\n            </div>\r\n            <nav className={style.navSidebar}>\r\n              <ul className={style.navList}>\r\n                <li className={style.navItem}>\r\n                  <FontAwesomeIcon icon=\"user-friends\" />\r\n                  Contacts\r\n                </li>\r\n                <li className={style.navItem}>\r\n                  <FontAwesomeIcon icon=\"comments\" />\r\n                  Chats\r\n                </li>\r\n                <li onClick={() => this.logoutHandler()} className={style.navItem}>\r\n                  <FontAwesomeIcon icon=\"sign-out-alt\" />\r\n                  Exit\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ButtonWithPopup);","import React, { useRef } from 'react';\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { IRootAction, IRootState } from \"../../store/rootReducer\";\nimport * as contactsAction from \"../../store/contacts/actions\";\nimport * as chatActions from \"../../store/chat/actions\";\nimport { UserData } from '../../store/contacts/types'\nimport { ChatData } from '../../store/chat/types'\n\nimport './Sidebar.css';\nimport User from \"../User\";\nimport userAvatar from '../../img/user_avatar.png'\nimport ButtonWithPopup from '../ButtonWithPopup';\n\nconst mapStateToProps = (state: IRootState) => ({\n\tactiveUserId: state.user.userData._id,\n\tcontacts: state.contacts.contactsData,\n\tchats: state.user.userData.chats,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\n\tbindActionCreators(\n\t\t{\n\t\t\tgetContacts: contactsAction.getContacts.request,\n\t\t\tgetActiveChat: chatActions.getActiveChat.request,\n\t\t\taddChat: chatActions.addChat.request\n\t\t},\n\t\tdispatch\n\t);\n\ntype SidebarProps = ReturnType<typeof mapStateToProps> &\n\tReturnType<typeof mapDispatchToProps>;\n\nconst Sidebar: React.FC<SidebarProps> = props => {\n\tReact.useEffect(() => {\n\t\tconst authToken = localStorage.getItem('authToken')\n\t\tif (!authToken) {\n\t\t\treturn\n\t\t}\n\t\tprops.getContacts()\n\t}, [])\n\n\tconst getDetailsOfChat = (chat: ChatData) => {\n\t\tif (chat.members.length === 1) {\n\t\t\tlet details = {\n\t\t\t\tname: \"You\",\n\t\t\t\tavatar: chat.avatar ? `http://chat.fs.a-level.com.ua/${chat.avatar.url}` : userAvatar\n\t\t\t}\n\t\t\treturn details\n\t\t} else if (chat.members.length > 2) {\n\t\t\tlet details = {\n\t\t\t\tname: chat.title ? chat.title : \"Group\",\n\t\t\t\tavatar: chat.avatar ? `http://chat.fs.a-level.com.ua/${chat.avatar.url}` : userAvatar\n\t\t\t}\n\t\t\treturn details\n\t\t} else {\n\t\t\tlet member = chat.members.find(member => {\n\t\t\t\treturn member._id !== props.activeUserId\n\t\t\t})\n\t\t\tlet memberAvatar = member && member.avatar && `http://chat.fs.a-level.com.ua/${member.avatar.url}`\n\t\t\tlet details = {\n\t\t\t\tname: member && (member.nick ? member.nick : member.login),\n\t\t\t\tavatar: chat.avatar ? `http://chat.fs.a-level.com.ua/${chat.avatar.url}` : (memberAvatar ? memberAvatar : userAvatar)\n\t\t\t}\n\t\t\treturn details\n\t\t}\n\t}\n\n\tconst checkMemberInChats = (contactId: string) => {\n\t\tlet contactsChats: string[] = []\n\t\tprops.chats.map((chat: ChatData) => {\n\t\t\tif (chat.members.length === 2) {\n\t\t\t\tchat.members.forEach(member => {\n\t\t\t\t\tif (member._id === contactId) {\n\t\t\t\t\t\tcontactsChats.push(chat._id)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\treturn contactsChats\n\t}\n\n\tconst activeChatHandler = (chatId: string) => {\n\t\tprops.getActiveChat(chatId)\n\t};\n\n\tconst addChatHandler = (contactId: string) => {\n\t\tif (checkMemberInChats(contactId).length) {\n\t\t\tprops.getActiveChat(checkMemberInChats(contactId)[0])\n\t\t} else {\n\t\t\tprops.addChat(contactId)\n\t\t}\n\t};\n\n\tconst renderSidebarContent = () => {\n\t\tif (props.chats && props.chats.length) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{ props.chats.map(chat =>\n\t\t\t\t\t\t<User\n\t\t\t\t\t\t\tkey={chat._id}\n\t\t\t\t\t\t\tname={getDetailsOfChat(chat).name}\n\t\t\t\t\t\t\tavatarSrc={getDetailsOfChat(chat).avatar}\n\t\t\t\t\t\t\t// avatarSrc={chat.avatar ? `http://chat.fs.a-level.com.ua/${chat.avatar.url}` : userAvatar}\n\t\t\t\t\t\t\tonClick={() => activeChatHandler(chat._id)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{ props.contacts.map((contact: UserData) => \n\t\t\t\t\t\t<User \n\t\t\t\t\t\t\tkey={contact.login}\n\t\t\t\t\t\t\tname={contact.nick ? contact.nick : contact.login}\n\t\t\t\t\t\t\tavatarSrc={contact.avatar ? `http://chat.fs.a-level.com.ua/${contact.avatar.url}` : userAvatar }\n\t\t\t\t\t\t\tonClick={() => addChatHandler(contact._id)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\t}\n\n\treturn (\n\t\t<aside className=\"sidebar\">\n\t\t\t<ButtonWithPopup />\n\t\t\t{renderSidebarContent()}\n\t\t</aside>\n\t)\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Sidebar));","import React from \"react\";\nimport \"./Empty.css\";\n\ninterface Props {\n  name: string,\n  avatarSrc: string\n}\n\nconst Empty = (props: Props) => {\n  return (\n    <div className=\"empty\">\n      <h1 className=\"emptyName\">Welcome, {props.name} </h1>\n      <img src={props.avatarSrc} alt={props.name} className=\"avatar\" />\n      <p className=\"emptyInfo\">\n        Please select a chat to start messaging\n      </p>\n    </div>\n  );\n};\n\nexport default Empty;","import React from \"react\";\nimport \"./Header.css\";\n\ninterface Props {\n\tuserName: string,\n  }\n\nfunction Header(props: Props){\n\treturn (\n\t\t<header className = \"header\">\n\t\t\t<h1 className = \"headerName\">{props.userName}</h1>\n\t\t\t<button className =\"deleteButton\">...</button>\n\t\t</header>\n\t);\n}\n\nexport default React.memo(Header);","import React from \"react\";\n// import { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport Iframe from 'react-iframe'\n\nimport { IRootState } from \"../../store/rootReducer\";\n// import * as ChatActions from \"../../store/chat/actions\";\n// import * as contactsAction from \"../../store/contacts/actions\";\nimport { MessageData } from \"../../store/chat/types\";\n// import { smilesObject } from \"../../smileObject\"\n\nimport \"./Chat.css\";\n\nconst mapStateToProps = (state: IRootState) => ({\n\tactiveUserId: state.user.userData._id,\n  nick: state.user.userData.nick,\n  activeChat: state.chat.chatData,\n  activeChatName: state.chat.activeChatName,\n  messages: state.chat.chatData ? state.chat.chatData.messages : []\n});\n\n// const mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\n//   bindActionCreators(\n//     {\n//       getContacts: contactsAction.getContacts.request,\n//     },\n//     dispatch\n//   );\n\n// type ChatProps = ReturnType<typeof mapStateToProps> &\n//   ReturnType<typeof mapDispatchToProps>;\n\n// type ChatProps = ReturnType<typeof mapStateToProps>;\n\nclass Chat extends React.PureComponent<any> {\n\n  chatsRef: React.RefObject <HTMLDivElement>\n\n  constructor(props:any){\n    super(props);\n    this.chatsRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    if (this.chatsRef.current) {\n      this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n    }\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  isUserMsg(message: MessageData){\n    // console.log(this.props.messages.message.owner._id, this.props.activeUserId, this.props.activeUserId === this.props.messages.message.owner._id)\n    return message.owner._id === this.props.activeUserId ? true : false\n  }\n\n  getTime(milliseconds: number) {\n    let formattedDate = new Date(milliseconds)\n    let hours = this.getFormattedTime(formattedDate.getHours());\n    let minutes = this.getFormattedTime(formattedDate.getMinutes());\n    return `${hours}:${minutes}`\n  }\n\n  getFormattedTime(timeUnit: number) {\n    return timeUnit < 10 ? `0${timeUnit}` : timeUnit;\n  }\n\n  getFormattedMessage (message: string) {\n    // for (let smile in smilesObject) {\n    //   let newKey= `:${smile}:`\n    //   while(message.includes(newKey)) {\n    //     message = message.replace(newKey, <img src={`https://www.webfx.com/tools/emoji-cheat-sheet/${smilesObject[smile]}`} />)\n    //   }\n    // }\n    \n    let videoArray = message.match(/http(?:s?):\\/\\/(?:www\\.)?youtu(?:be\\.com\\/watch\\?v=|\\.be\\/)([\\w\\-\\_]*)(&(amp;)?‌ [\\w\\?‌ =]*)?/)    \n    if (videoArray) {\n      let videoId = videoArray && videoArray[1]\n      return (\n        <>\n          <a href={message}>{message}</a>\n          <Iframe \n            url={`https://www.youtube.com/embed/${videoId}`}\n            width=\"100%\"\n            frameBorder={0}\n            allow={\"accelerometer\"}\n            allowFullScreen\n            encrypted-media\n            picture-in-picture\n          />\n        </>\n      )\n    } else {\n      return  message\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Chats\" ref = {this.chatsRef}>\n        {this.props.messages && this.props.messages.map((message: MessageData) => (\n          <div\n            key={message._id}\n            className={`\"Message_input_box\" Chat ${this.isUserMsg(message) ? \"is-user-msg\" : \"\"}`}\n            // onClick = {is_user_msg ? handleUserMessageEdit:handleContactMessageEdit}\n            // onMouseDown = {handleMouseDown}\n            // onMouseUp = {handleMouseUp}\n            // data-active = {activeUser}\n            data-name = {this.isUserMsg(message) ? \"You \": this.props.activeChatName}\n            data-user = {this.isUserMsg(message)}\n            data-text = {message.text} \n            data-number = {message._id}  \n          >\n            {/* <div\n              // className=\"{`C_Message_reply \"Chat ${ containReply ? \"show-reply\":\"\"} ${is_user_msg ? \"is-user-msg\" : \"\"}`}\n              className=\"Chat is-user-msg\"\n            > */}\n              {/* <p className = \"Message_reply_name\"> */}\n                {/* {store.getState().chatBoxContainReply[2]} */}\n              {/* </p> */}\n              {/* {store.getState().chatBoxContainReply[1].substring(0,70)} */}\n            {/* </div> */}\n            {this.getFormattedMessage(message.text)}\n            <div className=\"timeBlock\">{this.getTime(+message.createdAt)}</div>\n            <button \n              // data-active = {activeUser} \n              data-number = {message._id} \n              // onClick = {handleDeleteMessage} \n              className =\"Chat_delete_button\"\n            >x</button>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, null)(Chat);","import React from 'react'\nimport 'emoji-mart/css/emoji-mart.css'\nimport { Picker, Emoji } from 'emoji-mart'\n// import data from 'emoji-mart/data/google.json'\n// import { NimblePicker } from 'emoji-mart'\n// import { NimblePicker, NimbleEmoji } from 'emoji-mart-native'\n// import data from 'emoji-mart-native/data/google.json'\n// import dataRequires from 'emoji-mart-native/data/local-images/google'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport style from './style.module.css'\n\ninterface Props {\n  addEmoji: any\n}\n\ninterface State {\n  isOpenedEmoji: boolean,\n  emojiObj: string\n}\n\nclass ButtonWithEmoji extends React.PureComponent<Props, State> {\n  constructor(props: never) {\n    super(props);\n    this.state = {\n      isOpenedEmoji: false,\n      emojiObj: \"\"\n    }\n  }\n\n  myRef = React.createRef<HTMLDivElement>()\n\n  closeEmoji = (event: any) => {\n    console.log(this.myRef)\n    if (this.myRef.current && !(this.myRef.current.contains(event.target))) {\n      console.log(\"TCL: Button -> closeSmiles -> event\", event)\n      this.setState({\n        isOpenedEmoji: false\n      })\n    }\n  };\n\n  componentDidUpdate(prevProps: {}, prevState: State) {\n    if (prevState.isOpenedEmoji === this.state.isOpenedEmoji) {\n      return;\n    }\n    if (this.state.isOpenedEmoji) {\n      console.log(\"addEventListener\", prevState);\n      document.addEventListener(\"click\", this.closeEmoji);\n    } else {\n      console.log(\"removeEventListener\");\n      document.removeEventListener(\"click\", this.closeEmoji);\n    }\n  }\n\n  toggleEmoji = () => {\n    this.setState({\n      isOpenedEmoji: !this.state.isOpenedEmoji\n    })\n  }\n\n  // addEmoji = (e: any) => {\n  //   let emoji = e.native;\n  //   this.setState({\n  //     emojiObj: this.state.emojiObj + emoji\n  //   });\n  // };\n\n  render() {\n    const { isOpenedEmoji } = this.state;\n    return (\n      <div className={style.buttonWithEmoji}>\n        <button onClick={ this.toggleEmoji }>\n          <FontAwesomeIcon icon=\"smile\" />\n        </button>\n        {isOpenedEmoji && \n          <div ref={this.myRef} className={style.emojiBlock}>\n            {/* <NimblePicker set='google' data={data} onSelect={emoji => {\n              this.props.addEmoji(emoji)\n              console.log(emoji)}} /> */}\n            <Picker set='google' onSelect={emoji => {\n              this.props.addEmoji(emoji)\n              console.log(emoji)}} />\n            {/* <Picker theme='dark' /> */}\n          </div>\n        }\n      </div>\n    )\n  }\n}\nexport default ButtonWithEmoji;\n","import React from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport 'emoji-mart/css/emoji-mart.css'\nimport { Picker, Emoji } from 'emoji-mart'\n\nimport { IRootAction, IRootState } from \"../../store/rootReducer\";\nimport * as messageActions from \"../../store/message/actions\";\n\nimport ButtonWithEmoji from \"../ButtonWithEmoji\"\nimport style from './style.module.css'\n\nconst mapStateToProps = (state: IRootState) => ({\n  activeChatId: state.chat.activeChatId\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\n  bindActionCreators(\n    {\n      sendMessage: messageActions.sendMessage.request\n    },\n    dispatch\n  );\n\ntype MessageInputProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst MessageInput: React.FC<MessageInputProps> = ({ sendMessage, activeChatId }) => {\n  const [text, setText] = React.useState(\"\");\n  const [file, setFile] = React.useState(null);\n  // const [smile, setSmile] = React.useState(\"\");\n\n  const addEmoji = (emoji: any) => {\n    console.log(\"input\", emoji)\n    setText(text + emoji.native)\n  }\n\n  const sendMessageHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (text.trim() === '') return;\n    if (activeChatId) {\n      sendMessage({ activeChatId, text })\n    }\n    setText(\"\")\n  }\n\n  const uploadFile = (file: any) => {\n    if (activeChatId) {\n      sendMessage({ activeChatId, file })\n    }\n    setText(\"\")\n  }\n\n  return (\n    <>\n      {/* <Picker onSelect={emoji => {\n              addEmoji(emoji)\n              console.log(emoji)}} /> */}\n      <form action=\"\" onSubmit={sendMessageHandler} className={style.message}>\n        <input\n          className={style.messageInput}\n          placeholder=\"write a message\"\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <ButtonWithEmoji addEmoji={addEmoji} />\n        <div className={style.buttonBlock}>\n          <div className={style.uploadBtnWrapper}>\n            <button \n              // onClick={(e) => uploadFile(e.target.files[0])}\n            >\n              <FontAwesomeIcon icon=\"paperclip\" />\n            </button>\n            <input \n              className={style.uploadInput}\n              type=\"file\"\n              name=\"media\"\n              id=\"media\"\n              // onChange={e => {if(e.target.files && (e.target.files[0])) setFile(e.target.files[0])}}\n            />\n          </div>\n          <button type=\"submit\">\n            <FontAwesomeIcon icon=\"paper-plane\" />\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(MessageInput));","import React from \"react\";\nimport Header from \"../Header\";\n\nimport \"./ChatWindow.css\";\nimport Chat from \"../Chat\";\nimport MessageInput from \"../MessageInput\";\n\ninterface Props {\n  name: string,\n}\n\nconst ChatWindow = (props: Props) => {\n  return (\n    <div className=\"ChatWindow\">\n      <Header userName = {props.name} />\n      {/* <FunctionButtons /> */}\n      <Chat />\n      <MessageInput />\n      {/* <MessageInput value = {typing}/> */}\n    </div>\n  );\n};\n\nexport default React.memo(ChatWindow);","import React from 'react';\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { IRootAction, IRootState } from \"../../store/rootReducer\";\nimport * as UserActions from \"../../store/user/actions\";\n\nimport './Main.css';\nimport Empty from \"../Empty\";\nimport ChatWindow from \"../ChatWindow\";\nimport userAvatar from '../../img/user_avatar.png'\n\nconst mapStateToProps = (state: IRootState) => ({\n  nick: state.user.userData.nick,\n  login: state.user.userData.login,\n  avatar: state.user.userData.avatar ? `http://chat.fs.a-level.com.ua/${state.user.userData.avatar.url}` : userAvatar,\n  activeChatId: state.chat.chatData._id,\n  activeChatName: state.chat.activeChatName\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\n  bindActionCreators(\n    {\n      getUser: UserActions.getUser.request,\n      // pushRouter: push\n    },\n    dispatch\n  );\n\ntype MainProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst Main: React.FC<MainProps> = props => {\n\n  const renderMainPageContent = () => {\n    if (!props.activeChatId) {\n      return (\n        <Empty \n          name={props.nick ? props.nick : props.login}\n          avatarSrc={props.avatar} \n        />\n      )\n    }  else {\n      return (\n        <ChatWindow name={props.activeChatName} />\n      )\n    }\n  }\n\n  return (\n    <main className=\"Main\">\n      {renderMainPageContent()}\n    </main>\n  )\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Main));\n","import React from \"react\";\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport io from 'socket.io-client';\r\n// import { push } from \"connected-react-router\";\r\n\r\nimport { IRootAction } from \"../../store/rootReducer\";\r\nimport * as userAction from \"../../store/user/actions\";\r\nimport * as messageAction from \"../../store/message/actions\";\r\nimport { MessageData } from '../../store/message/types'\r\nimport { DecodedToken } from '../../store/auth/types'\r\n\r\nimport style from './style.module.css'\r\nimport Sidebar from '../Sidebar';\r\nimport Main from \"../Main\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\r\n  bindActionCreators(\r\n    {\r\n      getUser: userAction.getUser.request,\r\n      onMessage: messageAction.onMessage\r\n      // pushRouter: push\r\n    },\r\n    dispatch\r\n  );\r\n\r\ntype ProfileProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst Profile: React.FC<ProfileProps> = props => {\r\n  React.useEffect(() => {\r\n    const authToken = localStorage.getItem('authToken')\r\n    if (!authToken) {\r\n      return\r\n    }\r\n    props.getUser()\r\n\r\n    const socket = io('http://chat.fs.a-level.com.ua/');\r\n    socket.emit('jwt', localStorage.authToken)\r\n    socket.on('jwt_ok', (data: DecodedToken) => console.log(data))\r\n    socket.on('jwt_fail', (error: string) => console.log(error))\r\n    socket.on('msg', (message: MessageData) => {\r\n      props.onMessage(message)\r\n    })\r\n  },[])\r\n\r\n  return (\r\n    <div className={style.profile}>\r\n      <Sidebar />\r\n      <Main />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect( null, mapDispatchToProps)(React.memo(Profile));","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IRootState } from './store/rootReducer';\r\nimport Registration from './components/Registration';\r\nimport Authorization from './components/Authorization';\r\nimport Profile from './components/Profile';\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n    authToken: state.auth.authData.authToken\r\n})\r\n\r\ntype RoutesProps = ReturnType<typeof mapStateToProps>\r\n\r\nconst Routes: React.FC<RoutesProps> = ({ authToken }) => (\r\n    <Switch>\r\n        <Route exact path=\"/sign-in\" component={Authorization} />\r\n        <Route exact path=\"/registration\" component={Registration} />\r\n        {!authToken && <Redirect from=\"/\" to=\"/sign-in\" />}\r\n        <Route exact path=\"/profile\" component={Profile} />\r\n        {authToken && <Redirect from=\"/\" to=\"/profile\" />}\r\n        <Route path=\"/\" render={() => <p>Page Not Found</p>} />\r\n    </Switch>\r\n)\r\nexport default connect(mapStateToProps)(React.memo(Routes))","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { ConnectedRouter, routerMiddleware } from 'connected-react-router'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSmile, faPaperclip, faPaperPlane, faBars, faUserFriends, faComments, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport rootReducer from './store/rootReducer';\nimport rootSaga from './store/rootSaga';\nimport { history } from './history';\nimport Routes from './Routes';\n\nlibrary.add(faSmile, faPaperclip, faPaperPlane, faBars, faUserFriends, faComments, faSignOutAlt)\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = createStore(rootReducer, applyMiddleware(\n  routerMiddleware(history),\n  sagaMiddleware,\n))\n\nsagaMiddleware.run(rootSaga)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes />\n      </ConnectedRouter>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWithPopup\":\"style_buttonWithPopup__1lQAQ\",\"navOpener\":\"style_navOpener__3Hw_I\",\"popup\":\"style_popup__u9k-3\",\"popupHeader\":\"style_popupHeader__2ZHlh\",\"uploadForm\":\"style_uploadForm__jtt_q\",\"uploadBtnWrapper\":\"style_uploadBtnWrapper__WEYDC\",\"uploadInput\":\"style_uploadInput__3lZr2\",\"changeButton\":\"style_changeButton__HqBnn\",\"okButton\":\"style_okButton__1yZD1\",\"navSidebar\":\"style_navSidebar__3o8Bs\",\"navList\":\"style_navList__1QP6Z\",\"navItem\":\"style_navItem__1zHpi\"};","module.exports = __webpack_public_path__ + \"static/media/user_avatar.c3631c65.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"style_message__yYnVw\",\"messageInput\":\"style_messageInput__2lCn9\",\"ButtonWithEmoji\":\"style_ButtonWithEmoji__2Pk_-\",\"buttonBlock\":\"style_buttonBlock__g4UAK\",\"uploadBtnWrapper\":\"style_uploadBtnWrapper__bhQkQ\",\"uploadInput\":\"style_uploadInput__2F-YU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"style_loginForm__2koch\",\"buttonBlock\":\"style_buttonBlock__1NK4c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"style_loginForm__1OWHJ\",\"buttonBlock\":\"style_buttonBlock__3Jk58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWithEmoji\":\"style_buttonWithEmoji__1MOip\",\"emojiBlock\":\"style_emojiBlock__3BsgC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"style_profile__2a_cU\"};"],"sourceRoot":""}