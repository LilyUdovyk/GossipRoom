{"version":3,"sources":["store/message/actions.ts","store/auth/actions.ts","store/user/actions.ts","store/media/actions.ts","store/contacts/actions.ts","history.ts","store/auth/reducers.ts","store/user/reducers.ts","store/contacts/reducers.ts","store/chat/reducers.ts","store/message/reducers.ts","store/media/reducers.ts","store/rootReducer.ts","services/api/index.ts","store/auth/utils.ts","store/auth/sagas.ts","store/user/utils.ts","store/user/sagas.ts","store/contacts/utils.ts","store/contacts/sagas.ts","store/chat/utils.ts","store/chat/sagas.ts","store/message/utils.ts","store/message/sagas.ts","store/media/utils.ts","store/media/sagas.ts","store/rootSaga.ts","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","store/chat/actions.ts"],"names":["sendMessage","createAsyncAction","onMessage","createAction","message","saveOriginalMessage","savedMessage","replyToMessage","forwardMessage","authByCreds","regByCreds","logout","getUser","updateUser","uploadFile","getContacts","history","createBrowserHistory","initialState","authData","authToken","id","login","error","userData","_id","createdAt","nick","avatar","url","chats","contactsData","chatSuccessData","activeChatName","activeChat","owner","title","members","messages","originalMessage","isReply","isForward","messageData","chat","text","media","replies","replyTo","forwarded","forwardWith","fileData","mediaData","originalFileName","type","userAvatar","chatAvatar","rootReducer","combineReducers","router","connectRouter","auth","state","action","getType","actions","success","payload","failure","user","contacts","dataPost","Authorization","query","variables","a","fetch","method","headers","body","JSON","stringify","response","result","json","ok","Error","getAuthToken","password","Promise","res","setTimeout","loginContent","data","registrationQuery","regUser","regContent","UserUpsert","authByCredsSaga","regByCredsSaga","logoutSaga","localStorage","getItem","decoded","jwtDecode","sub","putResolve","put","push","take","request","call","setItem","clear","userQuery","getActiveUserQuery","getActiveUser","userId","activeUserQuery","userContent","UserFindOne","updateUserQuery","imageId","updateUserContent","getUserSaga","updateUserSaga","select","prevAvatar","prevAvatarId","prevPassword","getContactsList","сontactsContent","UserFind","getContactsSaga","сontacts","chatQuery","getActiveChatQuery","getActiveChat","chatId","activeChatQuery","chatContent","ChatFindOne","addNewChatQuery","addNewChat","firstMemberId","secondMemberId","newChatContent","ChatUpsert","addNewGroupQuery","addNewGroup","chatTitle","membersQuery","map","member","newGroupContent","updateChatQuery","updateChat","getActiveChatSaga","addChatSaga","addGroupSaga","updateChatSaga","activeUserId","getNameOfChat","length","find","newChat","console","log","chatData","messageQuery","sendMessageQuery","messageContent","MessageUpsert","sendMessageWithAtthmentQuery","sendMessageacWithAtthment","mediaId","replyToMessageQuery","originalMessageId","forwardMessageQuery","sendMessageSaga","onMessageSaga","replyToMessageSaga","forwardMessageSaga","activeChatId","playSound","Audio","play","getFileData","form","FormData","uploadFileSaga","rootSaga","all","spawn","Registration","React","lazy","Profile","CreationNewChat","UserSettings","ChatSettings","connect","memo","Suspense","fallback","exact","path","component","from","to","render","library","add","faSmile","faPaperclip","faPaperPlane","faBars","faUserFriends","faComments","faSignOutAlt","faFileAlt","faFileArchive","faFile","faFileVideo","faFileAudio","faTimes","faCheckCircle","faExclamationCircle","faReply","faShare","faCogs","faCommentDots","faUserPlus","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","routerMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","addChat","addGroup"],"mappings":"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","file":"static/js/main.3e50d022.chunk.js","sourcesContent":["import { createAsyncAction, createAction } from \"typesafe-actions\";\r\nimport { MessageCreds, MessageData, ReplyCreds, SavedMessageData } from \"./types\";\r\n\r\nexport const sendMessage = createAsyncAction(\r\n    \"message/SEND_MESSAGE_REQUEST\",\r\n    \"message/SEND_MESSAGE_SUCCESS\",\r\n    \"message/SEND_MESSAGE_FAILURE\"\r\n)<MessageCreds, MessageData, string>();\r\n\r\nexport const onMessage = createAction(\r\n    \"message/ON_MESSAGE\", (message: MessageData) => message\r\n)();\r\n\r\nexport const saveOriginalMessage = createAction(\r\n    \"message/SAVE_ORIGINAL_MESSAGE\", (savedMessage: SavedMessageData) => savedMessage\r\n)();\r\n\r\nexport const replyToMessage = createAsyncAction(\r\n    \"message/REPLY_TO_MESSAGE_REQUEST\",\r\n    \"message/REPLY_TO_MESSAGE_SUCCESS\",\r\n    \"message/REPLY_TO_MESSAGE_FAILURE\"\r\n)<ReplyCreds, MessageData, string>();\r\n\r\nexport const forwardMessage = createAsyncAction(\r\n    \"message/FORWARD_MESSAGE_REQUEST\",\r\n    \"message/FORWARD_MESSAGE_SUCCESS\",\r\n    \"message/FORWARD_MESSAGE_FAILURE\"\r\n)<ReplyCreds, MessageData, string>();\r\n","import { createAction, createAsyncAction } from \"typesafe-actions\";\r\nimport { AuthCreds, RegCreds, AuthSuccessData } from \"./types\";\r\n\r\nexport const authByCreds = createAsyncAction(\r\n    \"auth/AUTH_BY_CREDS_REQUEST\",\r\n    \"auth/AUTH_BY_CREDS_SUCCESS\",\r\n    \"auth/AUTH_BY_CREDS_FAILURE\"\r\n)<AuthCreds, AuthSuccessData, string>();\r\n\r\nexport const regByCreds = createAsyncAction(\r\n    \"auth/REG_BY_CREDS_REQUEST\",\r\n    \"auth/REG_BY_CREDS_SUCCESS\",\r\n    \"auth/REG_BY_CREDS_FAILURE\"\r\n)<RegCreds, AuthSuccessData, string>();\r\n\r\nexport const logout = createAction(\r\n    \"auth/LOGOUT\"\r\n)();","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { UserData, UpdateUserCreds } from \"../user/types\";\r\n\r\nexport const getUser = createAsyncAction(\r\n    \"user/GET_USER_REQUEST\",\r\n    \"user/GET_USER_SUCCESS\",\r\n    \"user/GET_USER_FAILURE\"\r\n)<void, UserData, string>();\r\n\r\nexport const updateUser = createAsyncAction(\r\n    \"user/UPDATE_USER_REQUEST\",\r\n    \"user/UPDATE_USER_SUCCESS\",\r\n    \"user/UPDATE_USER_FAILURE\"\r\n)<UpdateUserCreds, UserData, string>();","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { FileData } from \"./types\";\r\n\r\nexport const uploadFile = createAsyncAction(\r\n    \"media/UPLOAD_FILE_REQUEST\",\r\n    \"media/UPLOAD_FILE_SUCCESS\",\r\n    \"media/UPLOAD_FILE_FAILURE\"\r\n)<HTMLFormElement, FileData, string>();","import { createAsyncAction, createAction } from \"typesafe-actions\";\r\nimport { UserData } from \"../user/types\";\r\n\r\nexport const getContacts = createAsyncAction(\r\n    \"contacts/GET_CONTACTS_REQUEST\",\r\n    \"contacts/GET_CONTACTS_SUCCESS\",\r\n    \"contacts/GET_CONTACTS_FAILURE\"\r\n)<void, UserData[], string>();","import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory()","import { getType } from \"typesafe-actions\";\r\n\r\nimport { AuthState, AuthAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: AuthState = {\r\n    authData: {\r\n        authToken: null,\r\n        id: '',\r\n        login: '',\r\n        error: null\r\n    }\r\n}\r\n\r\nexport default (state: AuthState = initialState, action: AuthAction): AuthState => {\r\n    switch (action.type) {\r\n        case getType(actions.authByCreds.success):\r\n            return {\r\n                ...state, \r\n                authData: {\r\n                    ...state.authData, \r\n                    authToken: action.payload.authToken, \r\n                    id: action.payload.id, \r\n                    login: action.payload.login, \r\n                    error: null\r\n                } \r\n            }\r\n        case getType(actions.authByCreds.failure):\r\n            return {\r\n                ...state,\r\n                authData: {\r\n                    ...state.authData,\r\n                    authToken: null,\r\n                    error: action.payload\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { getType } from \"typesafe-actions\";\r\n\r\nimport { UserState, UserAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: UserState = {\r\n    error: null,\r\n    userData: {\r\n        _id: '',\r\n        createdAt: '',\r\n        login: '',\r\n        nick : '',\r\n        avatar: {\r\n            _id: '',\r\n            url: ''\r\n        },\r\n        chats: []\r\n    }\r\n}\r\n\r\nexport default (state: UserState = initialState, action: UserAction): UserState => {\r\n    switch (action.type) {\r\n        case getType(actions.getUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.getUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }  \r\n        case getType(actions.updateUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.updateUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }    \r\n        default:\r\n            return state\r\n    }\r\n}","import { getType } from \"typesafe-actions\";\r\n\r\nimport { ContactsState, ContactsAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: ContactsState = {\r\n    error: null,\r\n    contactsData: []\r\n}\r\n\r\nexport default (state: ContactsState = initialState, action: ContactsAction): ContactsState => {\r\n    switch (action.type) {\r\n        case getType(actions.getContacts.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                contactsData:[\r\n                    ...state.contactsData,\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case getType(actions.getContacts.failure):\r\n            return {\r\n                ...state,\r\n                contactsData:[],\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { getType } from \"typesafe-actions\";\r\n\r\nimport { ChatState, ChatAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: ChatState = {\r\n    error: null,\r\n    chatSuccessData: {\r\n        activeChatName: \"Chat\",\r\n        activeChat: {\r\n            _id: '',\r\n            owner: {\r\n                _id: '',\r\n                login: '',\r\n                nick : '',\r\n                avatar: {\r\n                    _id: '',\r\n                    url: ''\r\n                }\r\n            },\r\n            title: '',\r\n            createdAt: '',\r\n            members: [],\r\n            messages: [],\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default (state: ChatState = initialState, action: ChatAction): ChatState => {\r\n    switch (action.type) {\r\n        case getType(actions.getActiveChat.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                chatSuccessData: {\r\n                    ...state.chatSuccessData,                   \r\n                    activeChat: action.payload.activeChat,\r\n                    activeChatName: action.payload.activeChatName,\r\n                }\r\n            }\r\n        case getType(actions.getActiveChat.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.addChat.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                chatSuccessData: {\r\n                    ...state.chatSuccessData,                   \r\n                    activeChat: action.payload.activeChat,\r\n                    activeChatName: action.payload.activeChatName,\r\n                }\r\n            }\r\n        case getType(actions.addChat.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.addGroup.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                chatSuccessData: {\r\n                    ...state.chatSuccessData,                   \r\n                    activeChat: action.payload.activeChat,\r\n                    activeChatName: action.payload.activeChatName,\r\n                }\r\n            }\r\n        case getType(actions.addGroup.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.updateChat.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                chatSuccessData: {\r\n                    ...state.chatSuccessData,                   \r\n                    activeChat: action.payload.activeChat,\r\n                    activeChatName: action.payload.activeChatName,\r\n                }\r\n            }\r\n        case getType(actions.updateChat.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { getType } from \"typesafe-actions\";\r\n\r\nimport { MessageState, MessageAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: MessageState = {\r\n    error: null,\r\n    savedMessage: {\r\n        originalMessage: null,\r\n        isReply: false,\r\n        isForward: false,\r\n    },\r\n    messageData: {\r\n        _id: '',\r\n        createdAt: '',\r\n        owner: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        chat: {\r\n            _id: '',\r\n            owner: {\r\n                _id: '',\r\n                login: '',\r\n                nick : '',\r\n                avatar: {\r\n                    _id: '',\r\n                    url: ''\r\n                }\r\n            },\r\n            title: '',\r\n            createdAt: '',\r\n            members: [],\r\n            messages: [],\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        text: '',\r\n        media:[],\r\n        replies: [],\r\n        replyTo: {\r\n            _id: '',\r\n            text: '',\r\n            media: [],\r\n            owner: {\r\n                _id: '',\r\n                login: '',\r\n                nick : ''\r\n            }\r\n        },\r\n        forwarded: {\r\n            _id: '',\r\n            text: '',\r\n            media: [],\r\n            owner: {\r\n                _id: '',\r\n                login: '',\r\n                nick : ''\r\n            }\r\n        },\r\n        forwardWith: []\r\n    }\r\n}\r\n\r\nexport default (state: MessageState = initialState, action: MessageAction): MessageState => {\r\n    switch (action.type) {\r\n        case getType(actions.sendMessage.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                messageData: action.payload,\r\n            }\r\n        case getType(actions.sendMessage.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.onMessage):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                messageData: action.payload,\r\n            }\r\n        case getType(actions.saveOriginalMessage):\r\n            return {\r\n                ...state,\r\n                error: null, \r\n                savedMessage: {\r\n                    ...state.savedMessage,\r\n                    originalMessage: action.payload.originalMessage,\r\n                    isReply: action.payload.isReply,\r\n                    isForward: action.payload.isForward\r\n                }\r\n            }\r\n        case getType(actions.replyToMessage.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                messageData: action.payload,\r\n                savedMessage: {\r\n                    ...state.savedMessage,\r\n                    originalMessage: null,\r\n                    isReply: false\r\n                }               \r\n            }\r\n        case getType(actions.replyToMessage.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.forwardMessage.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                messageData: action.payload,\r\n                savedMessage: {\r\n                    ...state.savedMessage,\r\n                    originalMessage: null,\r\n                    isForward: false\r\n                }\r\n            }\r\n        case getType(actions.forwardMessage.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { getType } from \"typesafe-actions\";\r\n\r\nimport { MediaState, MediaAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: MediaState = {\r\n    error: null,\r\n    fileData: {\r\n        _id: null,\r\n        url: null\r\n    },\r\n    mediaData: {\r\n        _id: '',\r\n        createdAt: '',\r\n        owner: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        text: '',\r\n        url: '',\r\n        originalFileName: '',\r\n        type: '',\r\n        userAvatar: {\r\n            _id: '',\r\n            login: '',\r\n            nick : '',\r\n            avatar: {\r\n                _id: '',\r\n                url: ''\r\n            }\r\n        },\r\n        chatAvatar: [],\r\n        messages: []\r\n    }\r\n}\r\n\r\nexport default (state: MediaState = initialState, action: MediaAction): MediaState => {\r\n    switch (action.type) {\r\n        case getType(actions.uploadFile.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fileData: action.payload\r\n            }\r\n        case getType(actions.uploadFile.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { EmptyAction, StateType } from \"typesafe-actions\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport { history } from \"../history\";\r\n\r\nimport { AuthAction } from \"./auth/types\";\r\nimport authReducer from './auth/reducers'\r\nimport { UserAction } from \"./user/types\";\r\nimport userReducer from './user/reducers'\r\nimport { ContactsAction } from \"./contacts/types\";\r\nimport contactsReducer from './contacts/reducers'\r\nimport { ChatAction } from \"./chat/types\";\r\nimport chatReducer from './chat/reducers'\r\nimport { MessageAction } from \"./message/types\";\r\nimport messageReducer from './message/reducers'\r\nimport { MediaAction } from \"./media/types\";\r\nimport mediaReducer from './media/reducers'\r\n\r\nconst rootReducer = combineReducers({\r\n    router: connectRouter(history),\r\n    auth: authReducer,\r\n    user: userReducer,\r\n    contacts: contactsReducer,\r\n    chat: chatReducer,\r\n    message: messageReducer,\r\n    media: mediaReducer\r\n})\r\n\r\nexport type IRootState = StateType<typeof rootReducer>\r\nexport type IRootAction = AuthAction \r\n                        | UserAction \r\n                        | ContactsAction \r\n                        | ChatAction \r\n                        | MessageAction\r\n                        | MediaAction\r\n                        | EmptyAction<string>\r\n\r\nexport default rootReducer","interface variablesData {\n    \"login\"?: string\n    \"password\"?: string\n    \"nick\"?: string\n    \"activeUserQuery\"?: string\n    \"activeChatQuery\"?: string\n    \"chat_id\"?: string\n    \"text\"?: string\n    \"firstMember_id\"?: string\n    \"secondMember_id\"?: string\n    \"user_id\"?: string\n    \"image_id\"?: string\n    \"media_id\"?: string\n    \"message_id\"?: string\n    \"chat_title\"?: string,\n    \"members\"?: { \"_id\": string; }[]\n}\n\nexport const dataPost = async (Authorization: string, query: string, variables?: variablesData) => {\n    try {\n        const response = await fetch('http://chat.fs.a-level.com.ua/graphql', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': Authorization\n            },\n            body: JSON.stringify({\n                query: query,\n                variables: variables\n            })\n        });\n        const result = response.json();\n        return response.ok ? result : new Error('Status is not 200')\n    } catch (error) {\n        return new Error('dataPost failed')\n    }\n}","import { dataPost } from '../../services/api'\n\nexport const userQuery = \n`{\n  _id\n  login\n  nick\n  createdAt\n  avatar{\n    _id, url\n  }\n  chats{\n    _id\n    createdAt\n    title\n    owner{\n      _id login nick\n      avatar{\n        _id, url\n      }\n    }\n    members{\n      _id login nick\n      avatar{\n        _id, url\n      }\n    }\n    messages{\n      _id createdAt text\n      owner{\n        _id login nick\n        avatar{\n          _id, url\n        }\n      }\n    }\n    avatar{\n      _id, url\n    }\n  }\n}`\n\n\n\nconst logInQuery = `query log ($login:String, $password:String) {\n  login(login:$login, password:$password)\n}`\n\nexport const getAuthToken = async (login: string, password: string) => {\n  await new Promise((res) => setTimeout(res, 1000))\n  let loginContent = await dataPost('', logInQuery, \n      {\n          \"login\": login,\n          \"password\": password\n      })\n  return loginContent.data.login\n}\n\nconst registrationQuery = `mutation reg($nick:String, $login:String, $password:String) {\n  UserUpsert(user: {nick:$nick, login:$login, password:$password}) \n  ${userQuery}\n}`\n\nexport const regUser = async (nick: string, login: string, password: string) => {\n  await new Promise((res) => setTimeout(res, 1000))\n  let regContent = await dataPost('', registrationQuery,\n      {\n          \"nick\": nick,\n          \"login\": login,\n          \"password\": password\n      }  \n  )\n  return regContent.data.UserUpsert\n}","import { take, call, put, putResolve } from 'redux-saga/effects';\r\nimport { push } from 'connected-react-router';\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nimport * as actions from './actions'\r\nimport { getAuthToken , regUser } from './utils'\r\nimport { DecodedToken } from './types'\r\n\r\nexport function* authByCredsSaga() {\r\n    const authToken = localStorage.getItem('authToken')\r\n    if (authToken) {\r\n        const decoded: DecodedToken = jwtDecode(authToken);\r\n        const id = decoded.sub.id\r\n        const login = decoded.sub.login\r\n        yield putResolve(actions.authByCreds.success({authToken, id, login}))\r\n        yield put(push('/profile'))\r\n    }\r\n    while (true) {\r\n        const { payload } = yield take(actions.authByCreds.request)\r\n        try {\r\n            const authToken = yield call(getAuthToken, payload.login, payload.password)\r\n            if (authToken) {\r\n                const decoded: DecodedToken = jwtDecode(authToken)\r\n                const id = decoded.sub.id\r\n                const login = decoded.sub.login\r\n                localStorage.setItem('authToken', authToken)\r\n                yield putResolve(actions.authByCreds.success({ authToken, id, login }))\r\n                yield put(push('/profile'))\r\n            } else {\r\n                yield put(actions.authByCreds.failure('Wrong login or password'))\r\n            }\r\n        } catch (error) {\r\n            yield put(actions.authByCreds.failure(error.message))\r\n        }\r\n    }\r\n}\r\n\r\nexport function* regByCredsSaga() {\r\n    while (true) {\r\n        const { payload } = yield take(actions.regByCreds.request)\r\n        try {\r\n            const user = yield call(regUser, payload.nick, payload.login, payload.password)\r\n            const authToken = yield call(getAuthToken, payload.login, payload.password)\r\n            if (authToken) {\r\n                const decoded: DecodedToken = jwtDecode(authToken)\r\n                const id = decoded.sub.id\r\n                const login = decoded.sub.login\r\n                localStorage.setItem('authToken', authToken)\r\n                yield putResolve(actions.authByCreds.success({ authToken, id, login }))\r\n                yield put(push('/profile'))\r\n            } \r\n            else {\r\n                yield put(actions.authByCreds.failure(`User ${payload.login} already exists`))\r\n            }\r\n        } catch (error) {\r\n            yield put(actions.regByCreds.failure(error.message))\r\n        }\r\n    }\r\n}\r\n\r\nexport function* logoutSaga() {\r\n    while (true) {\r\n        yield take(actions.logout)\r\n        localStorage.clear();\r\n        yield put(push('/sign-in'))\r\n    }\r\n}","import { dataPost } from '../../services/api'\n\nexport const userQuery = \n`{\n  _id\n  login\n  nick\n  createdAt\n  avatar{\n    _id, url\n  }\n  chats{\n    _id\n    createdAt\n    title\n    owner{\n      _id login nick\n      avatar{\n        _id, url\n      }\n    }\n    members{\n      _id login nick\n      avatar{\n        _id, url\n      }\n    }\n    messages{\n      _id createdAt text\n      owner{\n        _id login nick\n        avatar{\n          _id, url\n        }\n      }\n    }\n    avatar{\n      _id, url\n    }\n  }\n}`\n\nconst getActiveUserQuery = `query getUsers($activeUserQuery: String){\n  UserFindOne(query: $activeUserQuery)\n  ${userQuery}\n}`\n\nexport const getActiveUser = async (userId: string) => {\n  const activeUserQuery = `[{\"_id\": \"${userId}\"}]`\n  let userContent = await dataPost( \n    `Bearer ${localStorage.authToken}`,\n    getActiveUserQuery,\n    {\n      \"activeUserQuery\": activeUserQuery\n    }\n  )\n  return userContent.data.UserFindOne\n}\n\nconst updateUserQuery = `mutation settings ($user_id: ID, $image_id: ID, $nick:String, $login:String, $password:String) {\n  UserUpsert(user: {_id: $user_id, \n    nick: $nick, \n    login: $login,\n    password: $password\n    avatar: {_id: $image_id}}) ${userQuery}\n}`\n  \nexport const updateUser = async (userId: string, imageId: string, nick: string, login: string, password: string) => {\n  let updateUserContent = await dataPost(\n    `Bearer ${localStorage.authToken}`,\n    updateUserQuery,\n    {\n        \"user_id\": userId,\n        \"image_id\": imageId,\n        \"nick\": nick,\n        \"login\": login,\n        \"password\": password\n    }  \n  )\n  return updateUserContent.data.UserUpsert\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { getActiveUser, updateUser } from './utils'\r\n\r\nexport function* getUserSaga() {\r\n  while (true) {\r\n    yield take(actions.getUser.request)\r\n    try {\r\n      const userId = yield select(state => state.auth.authData.id)\r\n      const user = yield call(getActiveUser, userId)\r\n      yield putResolve(actions.getUser.success(user))\r\n    } catch (error) {\r\n      yield put(actions.getUser.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* updateUserSaga() {\r\n  while (true) {\r\n      const { payload } = yield take(actions.updateUser.request)\r\n      try {\r\n          const prevAvatar = yield select(state => state.user.userData.avatar)\r\n          const prevAvatarId = prevAvatar ? prevAvatar._id : null\r\n          const prevPassword = yield select(state => state.user.userData.password)            \r\n          const imageId = payload.imageId === null ? prevAvatarId : payload.imageId        \r\n          const password = payload.password === \"\" ? prevPassword: payload.password\r\n          const user = yield call(updateUser, payload.userId, imageId, payload.nick, payload.login, password)\r\n          yield putResolve(actions.updateUser.success(user))\r\n          yield put(push('/profile'))\r\n      } catch (error) {\r\n          yield put(actions.updateUser.failure(error.message))\r\n      }\r\n  }\r\n}","import { dataPost } from '../../services/api'\n\nconst getContactsListQuery = `query users {\n    UserFind(query:\"[{}]\"){\n      _id\n      login\n      nick\n      createdAt\n      avatar{\n        _id, url\n      }\n    }\n  }`\n  \nexport const getContactsList = async () => {\n    let сontactsContent = await dataPost(\n      `Bearer ${localStorage.authToken}`,\n      getContactsListQuery\n    )\n    return сontactsContent.data.UserFind\n}","import { take, call, put, putResolve } from 'redux-saga/effects';\r\n\r\nimport * as actions from './actions'\r\nimport { getContactsList } from './utils'\r\n\r\nexport function* getContactsSaga() {\r\n  while (true) {\r\n    yield take(actions.getContacts.request)\r\n    try {\r\n      const сontacts = yield call(getContactsList)\r\n      yield putResolve(actions.getContacts.success(сontacts))\r\n    } catch (error) {\r\n      yield put(actions.getContacts.failure(error.message))\r\n    }\r\n  }\r\n}","import { dataPost } from '../../services/api'\nimport { UserData } from '../user/types';\n\nexport const chatQuery = \n`{\n  _id\n  title\n  createdAt\n  owner {\n    _id\n    login\n    nick\n    avatar {\n      _id\n      url\n    }\n  }\n  avatar {\n    _id\n    url\n  }\n  members {\n    _id\n    login\n    nick\n    avatar {\n      _id\n      url\n    }\n  }\n  messages{\n    _id\n    text\n    createdAt \n    owner{\n      _id\n      login\n      nick\n    }\n    media{\n      _id\n      url\n      type\n      originalFileName\n      text\n    }\n    replies {\n      _id\n      text\n      owner {\n        _id\n        login\n        nick\n      }\n      media{\n        _id\n        text\n        url\n        type\n        originalFileName\n      }\n    }\n    replyTo {\n      _id\n      text\n      owner {\n        _id\n        login\n        nick\n      }\n      media{\n        _id\n        text\n        url\n        type\n        originalFileName\n      }\n    }\n    forwarded {\n      _id\n      text\n      owner {\n        _id\n        login\n        nick\n      }\n      media{\n        _id\n        text\n        url\n        type\n        originalFileName\n      }\n    }\n    forwardWith {\n      _id\n      text\n      owner {\n        _id\n        login\n        nick\n      }\n      media{\n        _id\n        text\n        url\n        type\n        originalFileName\n      }\n    }\n  }\n}`\n\nconst getActiveChatQuery = `query getActiveChat($activeChatQuery: String){\n  ChatFindOne(query: $activeChatQuery)\n  ${chatQuery}\n}`\n\nexport const getActiveChat = async (chatId: string) => {\n  const activeChatQuery = `[{\"_id\": \"${chatId}\"}]`\n  let chatContent = await dataPost( \n    `Bearer ${localStorage.authToken}`,\n    getActiveChatQuery,\n    {\n      \"activeChatQuery\": activeChatQuery\n    }\n  )\n  return chatContent.data.ChatFindOne\n}\n\nconst addNewChatQuery = `mutation addChat ($firstMember_id:ID, $secondMember_id:ID) {\n  ChatUpsert(chat: {   \n        members: [\n      {_id: $firstMember_id}, {_id: $secondMember_id}\n    ]}) ${chatQuery}\n}`\n\nexport const addNewChat = async (firstMemberId: string, secondMemberId: string) => {\n  let newChatContent = await dataPost(\n    `Bearer ${localStorage.authToken}`,\n    addNewChatQuery,\n    {\n      \"firstMember_id\": firstMemberId,\n      \"secondMember_id\": secondMemberId\n    }\n  )\n  return newChatContent.data.ChatUpsert\n}\n\nconst addNewGroupQuery = `mutation addNewGroup ($chat_title:String, $members:[UserInput]) {\n  ChatUpsert(chat: {\n    title: $chat_title,\n    members: $members\n  }) ${chatQuery}\n}`\n\nexport const addNewGroup = async (chatTitle: string, members: UserData[]) => {\n  const membersQuery = members.map(member => {\n    return {\"_id\": member._id}\n  })\n  let newGroupContent = await dataPost( \n    `Bearer ${localStorage.authToken}`,\n    addNewGroupQuery,\n    {\n        \"chat_title\": chatTitle,\n        \"members\": membersQuery\n    }\n  )\n  return newGroupContent.data.ChatUpsert\n}\n\nconst updateChatQuery = `mutation changeChatTitle ($chat_id:ID, $chat_title: String) {\n  ChatUpsert(chat: { \n    _id: $chat_id, \n    title: $chat_title\n  }) ${chatQuery}\n}`\n\nexport const updateChat = async (chatId: string, chatTitle: string) => {\n  let chatContent = await dataPost(\n    `Bearer ${localStorage.authToken}`,\n    updateChatQuery,\n    {\n      \"chat_id\": chatId,\n      \"chat_title\": chatTitle\n    }\n  )\n  return chatContent.data.ChatUpsert\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { getActiveChat, addNewChat, addNewGroup, updateChat } from './utils'\r\nimport { ChatData } from '../chat/types';\r\n\r\nexport function* getActiveChatSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.getActiveChat.request)\r\n    try {\r\n      const activeUserId = yield select(state => state.auth.authData.id)\r\n      const activeChat = yield call(getActiveChat, payload)\r\n      const activeChatName = yield call(getNameOfChat, activeChat, activeUserId)\r\n      yield putResolve(actions.getActiveChat.success({ activeChat, activeChatName }))\r\n    } catch (error) {\r\n      yield put(actions.getActiveChat.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nconst getNameOfChat = (activeChat: ChatData, activeUserId: string) => {\r\n  if (activeChat.title) {\r\n    return activeChat.title\r\n  } else if (activeChat.members.length === 1) {\r\n    return \"You\"\r\n  } else if (activeChat.members.length > 2) {\r\n    return \"Group\"\r\n  } else {\r\n    let member = activeChat.members.find(member => {\r\n      return member._id !== activeUserId\r\n    })\r\n    return member && (member.nick || member.login)\r\n  }\r\n}\r\n\r\nexport function* addChatSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.addChat.request)\r\n    try {\r\n      const activeUserId = yield select(state => state.auth.authData.id)\r\n      const newChat = yield call(addNewChat, activeUserId,  payload)\r\n      const activeChatName = yield call(getNameOfChat, newChat, activeUserId)\r\n      yield putResolve(actions.addChat.success({ activeChat: newChat, activeChatName }))\r\n    } catch (error) {\r\n      yield put(actions.addChat.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* addGroupSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.addGroup.request)\r\n    try {\r\n      const newChat = yield call(addNewGroup, payload.chatTitle,  payload.members)\r\n      const activeUserId = yield select(state => state.auth.authData.id)\r\n      const activeChatName = yield call(getNameOfChat, newChat, activeUserId)\r\n      yield putResolve(actions.addGroup.success({ activeChat: newChat, activeChatName }))\r\n      yield put(push('/profile'))\r\n    } catch (error) {\r\n      yield put(actions.addGroup.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* updateChatSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.updateChat.request)\r\n    console.log('saga', payload)\r\n    try {\r\n      const chatData = yield call(updateChat, payload.chatId, payload.title)\r\n      console.log(\"saga chatData \", chatData )\r\n      const activeUserId = yield select(state => state.auth.authData.id)\r\n      const activeChatName = yield call(getNameOfChat, chatData, activeUserId)\r\n      yield putResolve(actions.updateChat.success({ activeChat: chatData, activeChatName }))\r\n      yield put(push('/profile'))\r\n    } catch (error) {\r\n      yield put(actions.updateChat.failure(error.message))\r\n    }\r\n  }\r\n}","import { dataPost } from '../../services/api'\n\nexport const messageQuery = \n`{\n  _id\n  createdAt\n  text\n  owner {\n    _id\n    login\n    nick\n  }\n  media{\n    _id\n    text\n    url\n    originalFileName\n    type\n  }\n  replies {\n    _id\n    text\n    owner {\n      _id\n      login\n      nick\n    }\n    media{\n      _id\n      text\n      url\n      originalFileName\n      type\n    }\n  }\n  replyTo {\n    _id\n    text\n    owner {\n      _id\n      login\n      nick\n    }\n    media{\n      _id\n      text\n      url\n      originalFileName\n      type\n    }\n  }\n  forwarded {\n    _id\n    text\n    owner {\n      _id\n      login\n      nick\n    }\n    media{\n      _id\n      text\n      url\n      originalFileName\n      type\n    }\n  }\n  forwardWith {\n    _id\n    text\n    owner {\n      _id\n      login\n      nick\n    }\n    media{\n      _id\n      text\n      url\n      originalFileName\n      type\n    }\n  }\n}`\n\nconst sendMessageQuery = `mutation sendMessage ($chat_id:ID, $text:String) {\n  MessageUpsert(message: {\n      chat: {_id: $chat_id}, \n      text: $text\n  }) ${messageQuery}\n}`\n\nexport const sendMessage = async (chatId: string, text: string) => {\n  let messageContent = await dataPost(\n    `Bearer ${localStorage.authToken}`,\n    sendMessageQuery,\n    {\n      \"chat_id\": chatId,\n      \"text\": text\n    }\n  )\n  return messageContent.data.MessageUpsert\n}\n\nconst sendMessageWithAtthmentQuery = `mutation sendMessage ($chat_id:ID, $text:String, $media_id:ID) {\n  MessageUpsert(message: {\n      chat: {_id: $chat_id}, \n      text: $text,\n    \tmedia:[{_id: $media_id}]\n  }) ${messageQuery}\n}`\n\nexport const sendMessageacWithAtthment = async (chatId: string, text: string, mediaId: string) => {\n  let messageContent = await dataPost(\n    `Bearer ${localStorage.authToken}`,\n    sendMessageWithAtthmentQuery,\n    {\n      \"chat_id\": chatId,\n      \"text\": text,\n      \"media_id\": mediaId\n    }\n  )\n  return messageContent.data.MessageUpsert\n}\n\nconst replyToMessageQuery = `mutation replyToMessage ($message_id:ID, $chat_id:ID, $text:String) {\n  MessageUpsert(message: {\n    chat: {_id: $chat_id},\n    text: $text\n    replyTo: {\n      _id: $message_id,\n    }\n  }) ${messageQuery}\n}`\n\n\nexport const replyToMessage = async (chatId: string, text: string, originalMessageId: string) => {\n  let messageContent = await dataPost(\n    `Bearer ${localStorage.authToken}`,\n    replyToMessageQuery,\n    {\n      \"chat_id\": chatId,\n      \"text\": text,\n      \"message_id\": originalMessageId\n    }\n  )\n  return messageContent.data.MessageUpsert\n}\n\nconst forwardMessageQuery = `mutation forwardedMessage ($chat_id:ID, $message_id:ID, $text:String) {\n  MessageUpsert(message: {\n    chat: {_id: $chat_id},\n    text: $text,\n    forwarded: {\n    \t_id: $message_id,\n    }\n  }) ${messageQuery}\n}`\n\n\nexport const forwardMessage = async (chatId: string, text: string, originalMessageId: string) => {\n  let messageContent = await dataPost( \n    `Bearer ${localStorage.authToken}`,\n    forwardMessageQuery,\n    {\n      \"chat_id\": chatId,\n      \"text\": text,\n      \"message_id\": originalMessageId\n    }\n  )\n  return messageContent.data.MessageUpsert\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\n\r\nimport * as actions from './actions'\r\nimport { getActiveChat } from '../chat/actions'\r\nimport { sendMessage, sendMessageacWithAtthment, replyToMessage, forwardMessage } from './utils'\r\n\r\nexport function* sendMessageSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.sendMessage.request)\r\n    try {\r\n      const message = payload.mediaId\r\n        ? yield call(sendMessageacWithAtthment, payload.activeChatId, payload.text, payload.mediaId)\r\n        : yield call(sendMessage, payload.activeChatId, payload.text)\r\n      yield putResolve(actions.sendMessage.success(message))\r\n    } catch (error) {\r\n      yield put(actions.sendMessage.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* onMessageSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.onMessage)\r\n    const activeUserId = yield select(state => state.user.userData._id)\r\n    if (payload.owner._id !== activeUserId) {\r\n      playSound()\r\n    }\r\n    const activeChatId = yield select(state => state.chat.chatSuccessData.activeChat._id)\r\n    if (activeChatId === payload.chat._id) {\r\n      yield put(getActiveChat.request(activeChatId))\r\n    }\r\n  }\r\n}\r\n\r\nconst playSound = () => {\r\n  const audio = new Audio(\"http://commondatastorage.googleapis.com/codeskulptor-demos/pyman_assets/eatedible.ogg\");\r\n  audio.play();\r\n}\r\n\r\nexport function* replyToMessageSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.replyToMessage.request)\r\n    try {\r\n      const message = yield call(replyToMessage, payload.activeChatId, payload.text, payload.originalMessageId)\r\n      yield putResolve(actions.replyToMessage.success(message))\r\n    } catch (error) {\r\n      yield put(actions.replyToMessage.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* forwardMessageSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.forwardMessage.request)\r\n    try {\r\n      const message = yield call(forwardMessage, payload.activeChatId, payload.text, payload.originalMessageId )\r\n      yield putResolve(actions.forwardMessage.success(message))\r\n    } catch (error) {\r\n      yield put(actions.forwardMessage.failure(error.message))\r\n    }\r\n  }\r\n}","export let getFileData = async (form: HTMLFormElement) => {\n  try {\n      const response = await fetch('http://chat.fs.a-level.com.ua/upload', \n                      {\n                        method: \"POST\",\n                        headers: localStorage.authToken ? { Authorization: 'Bearer ' + localStorage.authToken } : {},\n                        body: new FormData(form)\n                      }  );\n      const result = response.json();\n      return response.ok ? result : new Error('Status is not 200')\n  } catch (error) {\n      return new Error('DataPost failed')\n  }\n}","import { take, call, put, putResolve } from 'redux-saga/effects';\r\n\r\nimport * as actions from './actions'\r\nimport { getFileData } from './utils'\r\n\r\nexport function* uploadFileSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.uploadFile.request)\r\n    try {\r\n      const fileData = yield call(getFileData, payload)\r\n      yield putResolve(actions.uploadFile.success(fileData))\r\n    } catch (error) {\r\n      yield put(actions.uploadFile.failure(error.message))\r\n    }\r\n  }\r\n}","import { all, spawn } from \"redux-saga/effects\";\r\nimport { authByCredsSaga, regByCredsSaga, logoutSaga } from \"./auth/sagas\";\r\nimport { getUserSaga, updateUserSaga } from \"./user/sagas\";\r\nimport { getContactsSaga } from \"./contacts/sagas\";\r\nimport { getActiveChatSaga, addChatSaga, addGroupSaga, updateChatSaga } from \"./chat/sagas\";\r\nimport { sendMessageSaga, onMessageSaga, replyToMessageSaga, forwardMessageSaga } from \"./message/sagas\";\r\nimport { uploadFileSaga } from \"./media/sagas\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    spawn(authByCredsSaga),\r\n    spawn(regByCredsSaga),\r\n    spawn(getUserSaga),\r\n    spawn(getContactsSaga),\r\n    spawn(getActiveChatSaga),\r\n    spawn(sendMessageSaga),\r\n    spawn(addChatSaga),\r\n    spawn(logoutSaga),\r\n    spawn(onMessageSaga),\r\n    spawn(uploadFileSaga),\r\n    spawn(replyToMessageSaga),\r\n    spawn(forwardMessageSaga),\r\n    spawn(addGroupSaga),\r\n    spawn(updateUserSaga),\r\n    spawn(updateChatSaga)\r\n  ]);\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IRootState } from './store/rootReducer';\r\n\r\nconst Registration = React.lazy(() => import(\"./components/Registration\"));\r\nconst Authorization = React.lazy(() => import(\"./components/Authorization\"));\r\nconst Profile = React.lazy(() => import(\"./components/Profile\"));\r\nconst CreationNewChat = React.lazy(() => import(\"./components/CreationNewChat\"));\r\nconst UserSettings = React.lazy(() => import(\"./components/UserSettings\"));\r\nconst ChatSettings = React.lazy(() => import(\"./components/ChatSettings\"));\r\n\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n    authToken: state.auth.authData.authToken\r\n})\r\n\r\ntype RoutesProps = ReturnType<typeof mapStateToProps>\r\n\r\nconst Routes: React.FC<RoutesProps> = ({ authToken }) => (\r\n    <React.Suspense fallback={<div>Загрузка...</div>}>\r\n        <Switch>\r\n            <Route exact path='/sign-in' component={Authorization} />\r\n            <Route exact path='/registration' component={Registration} />\r\n            {!authToken && <Redirect from=\"/\" to='/sign-in' />}\r\n            <Route exact path='/profile' component={Profile} />\r\n            <Route exact path='/new-group' component={CreationNewChat} />\r\n            <Route exact path='/user-settings' component={UserSettings} />\r\n            <Route exact path='/chat-settings' component={ChatSettings} />\r\n            {authToken && <Redirect from=\"/\" to='/profile' />}\r\n            <Route path=\"/\" render={() => <div>Page Not Found</div>} />\r\n\r\n        </Switch>\r\n    </React.Suspense>\r\n)\r\nexport default connect(mapStateToProps)(React.memo(Routes))","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { ConnectedRouter, routerMiddleware } from 'connected-react-router'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSmile,\n         faPaperclip,\n         faPaperPlane,\n         faBars,\n         faUserFriends,\n         faComments,\n         faSignOutAlt,\n         faFileAlt,\n         faFileArchive,\n         faFile,\n         faFileVideo,\n         faFileAudio,\n         faTimes,\n         faCheckCircle,\n         faExclamationCircle,\n         faReply,\n         faShare,\n         faCogs,\n         faCommentDots,\n         faUserPlus\n       } from '@fortawesome/free-solid-svg-icons'\n\nimport rootReducer from './store/rootReducer';\nimport rootSaga from './store/rootSaga';\nimport { history } from './history';\nimport Routes from './Routes';\n\nlibrary.add(faSmile,\n            faPaperclip,\n            faPaperPlane,\n            faBars,\n            faUserFriends,\n            faComments,\n            faSignOutAlt,\n            faFileAlt,\n            faFileArchive, \n            faFile,\n            faFileVideo,\n            faFileAudio,\n            faTimes,\n            faCheckCircle,\n            faExclamationCircle,\n            faReply,\n            faShare,\n            faCogs,\n            faCommentDots,\n            faUserPlus\n          )\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = createStore(rootReducer, applyMiddleware(\n  routerMiddleware(history),\n  sagaMiddleware,\n))\n\nsagaMiddleware.run(rootSaga)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes />\n      </ConnectedRouter>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { ChatSuccessData, AddGroupCreds, UpdateChatCreds } from \"./types\";\r\n\r\nexport const getActiveChat = createAsyncAction(\r\n    \"chat/GET_ACTIVE_CHAT_REQUEST\",\r\n    \"chat/GET_ACTIVE_CHAT_SUCCESS\",\r\n    \"chat/GET_ACTIVE_CHAT_FAILURE\"\r\n)<string, ChatSuccessData, string>();\r\n\r\nexport const addChat = createAsyncAction(\r\n    \"chat/ADD_CHAT_REQUEST\",\r\n    \"chat/ADD_CHAT_SUCCESS\",\r\n    \"chat/ADD_CHAT_FAILURE\"\r\n)<string, ChatSuccessData, string>();\r\n\r\nexport const addGroup = createAsyncAction(\r\n    \"chat/ADD_GROUP_REQUEST\",\r\n    \"chat/ADD_GROUP_SUCCESS\",\r\n    \"chat/ADD_GROUP_FAILURE\"\r\n)<AddGroupCreds, ChatSuccessData, string>();\r\n\r\nexport const updateChat = createAsyncAction(\r\n    \"chat/UPDATE_GROUP_REQUEST\",\r\n    \"chat/UPDATE_GROUP_SUCCESS\",\r\n    \"chat/UPDATE_GROUP_FAILURE\"\r\n)<UpdateChatCreds, ChatSuccessData, string>();"],"sourceRoot":""}